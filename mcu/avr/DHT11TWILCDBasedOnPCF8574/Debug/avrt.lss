
avrt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000025bc  00002650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  0000265c  2**0
                  ALLOC
  3 .stab         00002658  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001346  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000615a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000062e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000832e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000942f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <main>
      8a:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e6       	ldi	r22, 0x64	; 100
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <pcf8574_init>:
#include PCF8574_I2CFLEURYPATH

/*
 * initialize
 */
void pcf8574_init() {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	69 97       	sbiw	r28, 0x19	; 25
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	#if PCF8574_I2CINIT == 1
	//init i2c
	i2c_init();
     cb2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <i2c_init>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a0 e2       	ldi	r26, 0x20	; 32
     cbc:	b1 e4       	ldi	r27, 0x41	; 65
     cbe:	8d 8b       	std	Y+21, r24	; 0x15
     cc0:	9e 8b       	std	Y+22, r25	; 0x16
     cc2:	af 8b       	std	Y+23, r26	; 0x17
     cc4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cc6:	6d 89       	ldd	r22, Y+21	; 0x15
     cc8:	7e 89       	ldd	r23, Y+22	; 0x16
     cca:	8f 89       	ldd	r24, Y+23	; 0x17
     ccc:	98 8d       	ldd	r25, Y+24	; 0x18
     cce:	2b ea       	ldi	r18, 0xAB	; 171
     cd0:	3a ea       	ldi	r19, 0xAA	; 170
     cd2:	4a e2       	ldi	r20, 0x2A	; 42
     cd4:	50 e4       	ldi	r21, 0x40	; 64
     cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	89 8b       	std	Y+17, r24	; 0x11
     ce0:	9a 8b       	std	Y+18, r25	; 0x12
     ce2:	ab 8b       	std	Y+19, r26	; 0x13
     ce4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ce6:	69 89       	ldd	r22, Y+17	; 0x11
     ce8:	7a 89       	ldd	r23, Y+18	; 0x12
     cea:	8b 89       	ldd	r24, Y+19	; 0x13
     cec:	9c 89       	ldd	r25, Y+20	; 0x14
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	1c f4       	brge	.+6      	; 0xd04 <pcf8574_init+0x66>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	88 8b       	std	Y+16, r24	; 0x10
     d02:	91 c0       	rjmp	.+290    	; 0xe26 <pcf8574_init+0x188>
	else if (__tmp > 255)
     d04:	69 89       	ldd	r22, Y+17	; 0x11
     d06:	7a 89       	ldd	r23, Y+18	; 0x12
     d08:	8b 89       	ldd	r24, Y+19	; 0x13
     d0a:	9c 89       	ldd	r25, Y+20	; 0x14
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	4f e7       	ldi	r20, 0x7F	; 127
     d12:	53 e4       	ldi	r21, 0x43	; 67
     d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d18:	18 16       	cp	r1, r24
     d1a:	0c f0       	brlt	.+2      	; 0xd1e <pcf8574_init+0x80>
     d1c:	7b c0       	rjmp	.+246    	; 0xe14 <pcf8574_init+0x176>
	{
		_delay_ms(__us / 1000.0);
     d1e:	6d 89       	ldd	r22, Y+21	; 0x15
     d20:	7e 89       	ldd	r23, Y+22	; 0x16
     d22:	8f 89       	ldd	r24, Y+23	; 0x17
     d24:	98 8d       	ldd	r25, Y+24	; 0x18
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a e7       	ldi	r20, 0x7A	; 122
     d2c:	54 e4       	ldi	r21, 0x44	; 68
     d2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	8c 87       	std	Y+12, r24	; 0x0c
     d38:	9d 87       	std	Y+13, r25	; 0x0d
     d3a:	ae 87       	std	Y+14, r26	; 0x0e
     d3c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d3e:	6c 85       	ldd	r22, Y+12	; 0x0c
     d40:	7d 85       	ldd	r23, Y+13	; 0x0d
     d42:	8e 85       	ldd	r24, Y+14	; 0x0e
     d44:	9f 85       	ldd	r25, Y+15	; 0x0f
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	4a ef       	ldi	r20, 0xFA	; 250
     d4c:	54 e4       	ldi	r21, 0x44	; 68
     d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	88 87       	std	Y+8, r24	; 0x08
     d58:	99 87       	std	Y+9, r25	; 0x09
     d5a:	aa 87       	std	Y+10, r26	; 0x0a
     d5c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     d5e:	68 85       	ldd	r22, Y+8	; 0x08
     d60:	79 85       	ldd	r23, Y+9	; 0x09
     d62:	8a 85       	ldd	r24, Y+10	; 0x0a
     d64:	9b 85       	ldd	r25, Y+11	; 0x0b
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e8       	ldi	r20, 0x80	; 128
     d6c:	5f e3       	ldi	r21, 0x3F	; 63
     d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d72:	88 23       	and	r24, r24
     d74:	2c f4       	brge	.+10     	; 0xd80 <pcf8574_init+0xe2>
		__ticks = 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9f 83       	std	Y+7, r25	; 0x07
     d7c:	8e 83       	std	Y+6, r24	; 0x06
     d7e:	3f c0       	rjmp	.+126    	; 0xdfe <pcf8574_init+0x160>
	else if (__tmp > 65535)
     d80:	68 85       	ldd	r22, Y+8	; 0x08
     d82:	79 85       	ldd	r23, Y+9	; 0x09
     d84:	8a 85       	ldd	r24, Y+10	; 0x0a
     d86:	9b 85       	ldd	r25, Y+11	; 0x0b
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	3f ef       	ldi	r19, 0xFF	; 255
     d8c:	4f e7       	ldi	r20, 0x7F	; 127
     d8e:	57 e4       	ldi	r21, 0x47	; 71
     d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d94:	18 16       	cp	r1, r24
     d96:	4c f5       	brge	.+82     	; 0xdea <pcf8574_init+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d98:	6c 85       	ldd	r22, Y+12	; 0x0c
     d9a:	7d 85       	ldd	r23, Y+13	; 0x0d
     d9c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d9e:	9f 85       	ldd	r25, Y+15	; 0x0f
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e2       	ldi	r20, 0x20	; 32
     da6:	51 e4       	ldi	r21, 0x41	; 65
     da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	9f 83       	std	Y+7, r25	; 0x07
     dbe:	8e 83       	std	Y+6, r24	; 0x06
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <pcf8574_init+0x142>
     dc2:	88 ec       	ldi	r24, 0xC8	; 200
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9d 83       	std	Y+5, r25	; 0x05
     dc8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <pcf8574_init+0x130>
     dd2:	9d 83       	std	Y+5, r25	; 0x05
     dd4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	9f 83       	std	Y+7, r25	; 0x07
     dde:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	9f 81       	ldd	r25, Y+7	; 0x07
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	69 f7       	brne	.-38     	; 0xdc2 <pcf8574_init+0x124>
     de8:	24 c0       	rjmp	.+72     	; 0xe32 <pcf8574_init+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dea:	68 85       	ldd	r22, Y+8	; 0x08
     dec:	79 85       	ldd	r23, Y+9	; 0x09
     dee:	8a 85       	ldd	r24, Y+10	; 0x0a
     df0:	9b 85       	ldd	r25, Y+11	; 0x0b
     df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	9f 83       	std	Y+7, r25	; 0x07
     dfc:	8e 83       	std	Y+6, r24	; 0x06
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	9f 81       	ldd	r25, Y+7	; 0x07
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	9b 81       	ldd	r25, Y+3	; 0x03
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <pcf8574_init+0x16c>
     e0e:	9b 83       	std	Y+3, r25	; 0x03
     e10:	8a 83       	std	Y+2, r24	; 0x02
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <pcf8574_init+0x194>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e14:	69 89       	ldd	r22, Y+17	; 0x11
     e16:	7a 89       	ldd	r23, Y+18	; 0x12
     e18:	8b 89       	ldd	r24, Y+19	; 0x13
     e1a:	9c 89       	ldd	r25, Y+20	; 0x14
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	88 8b       	std	Y+16, r24	; 0x10
     e26:	88 89       	ldd	r24, Y+16	; 0x10
     e28:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	8a 95       	dec	r24
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <pcf8574_init+0x18e>
     e30:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	#endif

	//reset the pin status
	uint8_t i = 0;
     e32:	19 8e       	std	Y+25, r1	; 0x19
	for(i=0; i<PCF8574_MAXDEVICES; i++)
     e34:	19 8e       	std	Y+25, r1	; 0x19
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <pcf8574_init+0x1ae>
		pcf8574_pinstatus[i] = 0;
     e38:	89 8d       	ldd	r24, Y+25	; 0x19
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	fc 01       	movw	r30, r24
     e40:	e3 59       	subi	r30, 0x93	; 147
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	10 82       	st	Z, r1
	_delay_us(10);
	#endif

	//reset the pin status
	uint8_t i = 0;
	for(i=0; i<PCF8574_MAXDEVICES; i++)
     e46:	89 8d       	ldd	r24, Y+25	; 0x19
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	89 8f       	std	Y+25, r24	; 0x19
     e4c:	89 8d       	ldd	r24, Y+25	; 0x19
     e4e:	88 23       	and	r24, r24
     e50:	99 f3       	breq	.-26     	; 0xe38 <pcf8574_init+0x19a>
		pcf8574_pinstatus[i] = 0;

}
     e52:	69 96       	adiw	r28, 0x19	; 25
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <pcf8574_getoutput>:

/*
 * get output status
 */
int8_t pcf8574_getoutput(uint8_t deviceid) {
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <pcf8574_getoutput+0x6>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	8a 83       	std	Y+2, r24	; 0x02
	int8_t data = -1;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	89 83       	std	Y+1, r24	; 0x01
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	88 23       	and	r24, r24
     e78:	41 f4       	brne	.+16     	; 0xe8a <pcf8574_getoutput+0x26>
		data = pcf8574_pinstatus[deviceid];
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	e3 59       	subi	r30, 0x93	; 147
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	89 83       	std	Y+1, r24	; 0x01
	}
	return data;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <pcf8574_getoutputpin>:

/*
 * get output pin status
 */
int8_t pcf8574_getoutputpin(uint8_t deviceid, uint8_t pin) {
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <pcf8574_getoutputpin+0x6>
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	6b 83       	std	Y+3, r22	; 0x03
	int8_t data = -1;
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	89 83       	std	Y+1, r24	; 0x01
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	88 23       	and	r24, r24
     eae:	e1 f4       	brne	.+56     	; 0xee8 <pcf8574_getoutputpin+0x52>
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	c8 f4       	brcc	.+50     	; 0xee8 <pcf8574_getoutputpin+0x52>
		data = pcf8574_pinstatus[deviceid];
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	fc 01       	movw	r30, r24
     ebe:	e3 59       	subi	r30, 0x93	; 147
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 81       	ld	r24, Z
     ec4:	89 83       	std	Y+1, r24	; 0x01
		data = (data >> pin) & 0b00000001;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	33 27       	eor	r19, r19
     ecc:	27 fd       	sbrc	r18, 7
     ece:	30 95       	com	r19
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a9 01       	movw	r20, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <pcf8574_getoutputpin+0x48>
     eda:	55 95       	asr	r21
     edc:	47 95       	ror	r20
     ede:	8a 95       	dec	r24
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <pcf8574_getoutputpin+0x44>
     ee2:	ca 01       	movw	r24, r20
     ee4:	81 70       	andi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
		//get the pin == 0 or 1
	}
	return data;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <pcf8574_setoutput>:

/*
 * set output pins
 */
int8_t pcf8574_setoutput(uint8_t deviceid, uint8_t data) {
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <pcf8574_setoutput+0x6>
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6a 83       	std	Y+2, r22	; 0x02
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	88 23       	and	r24, r24
     f0a:	a1 f4       	brne	.+40     	; 0xf34 <pcf8574_setoutput+0x3e>
		pcf8574_pinstatus[deviceid] = data;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fc 01       	movw	r30, r24
     f14:	e3 59       	subi	r30, 0x93	; 147
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	80 83       	st	Z, r24
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	89 5d       	subi	r24, 0xD9	; 217
     f20:	88 0f       	add	r24, r24
     f22:	0e 94 6f 0c 	call	0x18de	; 0x18de <i2c_start>
		i2c_write(data);
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <i2c_write>
		i2c_stop();
     f2c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <i2c_stop>
		return 0;
     f30:	1b 82       	std	Y+3, r1	; 0x03
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <pcf8574_setoutput+0x42>
	}
	return -1;
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	8b 83       	std	Y+3, r24	; 0x03
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <pcf8574_setoutputpins>:

/*
 * set output pins, replace actual status of a device from pinstart for pinlength with data
 */
int8_t pcf8574_setoutputpins(uint8_t deviceid, uint8_t pinstart, uint8_t pinlength, int8_t data) {
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	27 97       	sbiw	r28, 0x07	; 7
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	6c 83       	std	Y+4, r22	; 0x04
     f5e:	4d 83       	std	Y+5, r20	; 0x05
     f60:	2e 83       	std	Y+6, r18	; 0x06
	//actual data is         0b01101110
	//want to change              ---
	//pinstart                    4
	//data                        101   (pinlength 3)
	//result                 0b01110110
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pinstart - pinlength + 1 >= 0 && pinstart - pinlength + 1 >= 0 && pinstart < PCF8574_MAXPINS && pinstart > 0 && pinlength > 0)) {
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 23       	and	r24, r24
     f66:	09 f0       	breq	.+2      	; 0xf6a <pcf8574_setoutputpins+0x24>
     f68:	8b c0       	rjmp	.+278    	; 0x1080 <pcf8574_setoutputpins+0x13a>
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a9 01       	movw	r20, r18
     f78:	48 1b       	sub	r20, r24
     f7a:	59 0b       	sbc	r21, r25
     f7c:	ca 01       	movw	r24, r20
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	99 23       	and	r25, r25
     f82:	0c f4       	brge	.+2      	; 0xf86 <pcf8574_setoutputpins+0x40>
     f84:	7d c0       	rjmp	.+250    	; 0x1080 <pcf8574_setoutputpins+0x13a>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	b9 01       	movw	r22, r18
     f94:	68 1b       	sub	r22, r24
     f96:	79 0b       	sbc	r23, r25
     f98:	cb 01       	movw	r24, r22
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	99 23       	and	r25, r25
     f9e:	0c f4       	brge	.+2      	; 0xfa2 <pcf8574_setoutputpins+0x5c>
     fa0:	6f c0       	rjmp	.+222    	; 0x1080 <pcf8574_setoutputpins+0x13a>
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	88 30       	cpi	r24, 0x08	; 8
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <pcf8574_setoutputpins+0x64>
     fa8:	6b c0       	rjmp	.+214    	; 0x1080 <pcf8574_setoutputpins+0x13a>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	88 23       	and	r24, r24
     fae:	09 f4       	brne	.+2      	; 0xfb2 <pcf8574_setoutputpins+0x6c>
     fb0:	67 c0       	rjmp	.+206    	; 0x1080 <pcf8574_setoutputpins+0x13a>
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	88 23       	and	r24, r24
     fb6:	09 f4       	brne	.+2      	; 0xfba <pcf8574_setoutputpins+0x74>
     fb8:	63 c0       	rjmp	.+198    	; 0x1080 <pcf8574_setoutputpins+0x13a>
	    uint8_t b = 0;
     fba:	1a 82       	std	Y+2, r1	; 0x02
	    b = pcf8574_pinstatus[deviceid];
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	fc 01       	movw	r30, r24
     fc4:	e3 59       	subi	r30, 0x93	; 147
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	8a 83       	std	Y+2, r24	; 0x02
	    uint8_t mask = ((1 << pinlength) - 1) << (pinstart - pinlength + 1);
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <pcf8574_setoutputpins+0x96>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	2a 95       	dec	r18
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <pcf8574_setoutputpins+0x92>
     fe0:	ac 01       	movw	r20, r24
     fe2:	41 50       	subi	r20, 0x01	; 1
     fe4:	50 40       	sbci	r21, 0x00	; 0
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	b9 01       	movw	r22, r18
     ff4:	68 1b       	sub	r22, r24
     ff6:	79 0b       	sbc	r23, r25
     ff8:	cb 01       	movw	r24, r22
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	9a 01       	movw	r18, r20
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <pcf8574_setoutputpins+0xbe>
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	8a 95       	dec	r24
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <pcf8574_setoutputpins+0xba>
    1008:	c9 01       	movw	r24, r18
    100a:	89 83       	std	Y+1, r24	; 0x01
		data <<= (pinstart - pinlength + 1);
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	48 2f       	mov	r20, r24
    1010:	55 27       	eor	r21, r21
    1012:	47 fd       	sbrc	r20, 7
    1014:	50 95       	com	r21
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	b9 01       	movw	r22, r18
    1024:	68 1b       	sub	r22, r24
    1026:	79 0b       	sbc	r23, r25
    1028:	cb 01       	movw	r24, r22
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	9a 01       	movw	r18, r20
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <pcf8574_setoutputpins+0xee>
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	8a 95       	dec	r24
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <pcf8574_setoutputpins+0xea>
    1038:	c9 01       	movw	r24, r18
    103a:	8e 83       	std	Y+6, r24	; 0x06
		data &= mask;
    103c:	99 81       	ldd	r25, Y+1	; 0x01
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	89 23       	and	r24, r25
    1042:	8e 83       	std	Y+6, r24	; 0x06
		b &= ~(mask);
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	98 2f       	mov	r25, r24
    1048:	90 95       	com	r25
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	89 23       	and	r24, r25
    104e:	8a 83       	std	Y+2, r24	; 0x02
		b |= data;
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	89 2b       	or	r24, r25
    1056:	8a 83       	std	Y+2, r24	; 0x02
	    pcf8574_pinstatus[deviceid] = b;
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	fc 01       	movw	r30, r24
    1060:	e3 59       	subi	r30, 0x93	; 147
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 83       	st	Z, r24
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	89 5d       	subi	r24, 0xD9	; 217
    106c:	88 0f       	add	r24, r24
    106e:	0e 94 6f 0c 	call	0x18de	; 0x18de <i2c_start>
		i2c_write(b);
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <i2c_write>
		i2c_stop();
    1078:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <i2c_stop>
		return 0;
    107c:	1f 82       	std	Y+7, r1	; 0x07
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <pcf8574_setoutputpins+0x13e>
	}
	return -1;
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	3f 83       	std	Y+7, r19	; 0x07
    1084:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1086:	27 96       	adiw	r28, 0x07	; 7
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <pcf8574_setoutputpin+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <pcf8574_setoutputpin+0x8>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <pcf8574_setoutputpin+0xa>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	8a 83       	std	Y+2, r24	; 0x02
    10a8:	6b 83       	std	Y+3, r22	; 0x03
    10aa:	4c 83       	std	Y+4, r20	; 0x04
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 23       	and	r24, r24
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <pcf8574_setoutputpin+0x1c>
    10b2:	45 c0       	rjmp	.+138    	; 0x113e <pcf8574_setoutputpin+0xa6>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 30       	cpi	r24, 0x08	; 8
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <pcf8574_setoutputpin+0x24>
    10ba:	41 c0       	rjmp	.+130    	; 0x113e <pcf8574_setoutputpin+0xa6>
	    uint8_t b = 0;
    10bc:	19 82       	std	Y+1, r1	; 0x01
	    b = pcf8574_pinstatus[deviceid];
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	fc 01       	movw	r30, r24
    10c6:	e3 59       	subi	r30, 0x93	; 147
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	80 81       	ld	r24, Z
    10cc:	89 83       	std	Y+1, r24	; 0x01
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	88 23       	and	r24, r24
    10d2:	81 f0       	breq	.+32     	; 0x10f4 <pcf8574_setoutputpin+0x5c>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <pcf8574_setoutputpin+0x4e>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <pcf8574_setoutputpin+0x4a>
    10ea:	98 2f       	mov	r25, r24
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	89 2b       	or	r24, r25
    10f0:	8e 83       	std	Y+6, r24	; 0x06
    10f2:	0f c0       	rjmp	.+30     	; 0x1112 <pcf8574_setoutputpin+0x7a>
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <pcf8574_setoutputpin+0x6c>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	2a 95       	dec	r18
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <pcf8574_setoutputpin+0x68>
    1108:	98 2f       	mov	r25, r24
    110a:	90 95       	com	r25
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	89 23       	and	r24, r25
    1110:	8e 83       	std	Y+6, r24	; 0x06
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	89 83       	std	Y+1, r24	; 0x01
	    pcf8574_pinstatus[deviceid] = b;
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	fc 01       	movw	r30, r24
    111e:	e3 59       	subi	r30, 0x93	; 147
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	80 83       	st	Z, r24
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	89 5d       	subi	r24, 0xD9	; 217
    112a:	88 0f       	add	r24, r24
    112c:	0e 94 6f 0c 	call	0x18de	; 0x18de <i2c_start>
		i2c_write(b);
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <i2c_write>
		i2c_stop();
    1136:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <i2c_stop>
		return 0;
    113a:	1d 82       	std	Y+5, r1	; 0x05
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <pcf8574_setoutputpin+0xaa>
	}
	return -1;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	8d 83       	std	Y+5, r24	; 0x05
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1144:	26 96       	adiw	r28, 0x06	; 6
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <pcf8574_setoutputpinhigh+0x6>
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	6a 83       	std	Y+2, r22	; 0x02
	return pcf8574_setoutputpin(deviceid, pin, 1);
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	6a 81       	ldd	r22, Y+2	; 0x02
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	0e 94 4c 08 	call	0x1098	; 0x1098 <pcf8574_setoutputpin>
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	00 d0       	rcall	.+0      	; 0x117e <pcf8574_setoutputpinlow+0x6>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6a 83       	std	Y+2, r22	; 0x02
	return pcf8574_setoutputpin(deviceid, pin, 0);
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	6a 81       	ldd	r22, Y+2	; 0x02
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	0e 94 4c 08 	call	0x1098	; 0x1098 <pcf8574_setoutputpin>
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <pcf8574_getinput>:


/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <pcf8574_getinput+0x6>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	8a 83       	std	Y+2, r24	; 0x02
	int8_t data = -1;
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	89 83       	std	Y+1, r24	; 0x01
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	88 23       	and	r24, r24
    11ae:	79 f4       	brne	.+30     	; 0x11ce <pcf8574_getinput+0x34>
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	87 96       	adiw	r24, 0x27	; 39
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	81 60       	ori	r24, 0x01	; 1
    11be:	0e 94 6f 0c 	call	0x18de	; 0x18de <i2c_start>
		data = ~i2c_readNak();
    11c2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2c_readNak>
    11c6:	80 95       	com	r24
    11c8:	89 83       	std	Y+1, r24	; 0x01
		i2c_stop();
    11ca:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <i2c_stop>
	}
	return data;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <pcf8574_getinputpin>:

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <pcf8574_getinputpin+0x6>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	8a 83       	std	Y+2, r24	; 0x02
    11e8:	6b 83       	std	Y+3, r22	; 0x03
	int8_t data = -1;
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	89 83       	std	Y+1, r24	; 0x01
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	88 23       	and	r24, r24
    11f2:	d9 f4       	brne	.+54     	; 0x122a <pcf8574_getinputpin+0x50>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	c0 f4       	brcc	.+48     	; 0x122a <pcf8574_getinputpin+0x50>
		data = pcf8574_getinput(deviceid);
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	0e 94 cd 08 	call	0x119a	; 0x119a <pcf8574_getinput>
    1200:	89 83       	std	Y+1, r24	; 0x01
		if(data != -1) {
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 3f       	cpi	r24, 0xFF	; 255
    1206:	89 f0       	breq	.+34     	; 0x122a <pcf8574_getinputpin+0x50>
			data = (data >> pin) & 0b00000001;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	33 27       	eor	r19, r19
    120e:	27 fd       	sbrc	r18, 7
    1210:	30 95       	com	r19
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <pcf8574_getinputpin+0x46>
    121c:	55 95       	asr	r21
    121e:	47 95       	ror	r20
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <pcf8574_getinputpin+0x42>
    1224:	ca 01       	movw	r24, r20
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return data;
    122a:	89 81       	ldd	r24, Y+1	; 0x01
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <toggle_e>:
#define delay(us)  _delayFourCycles( ( ( 1*(F_CPU/4000) )*us)/1000 )


/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	62 e0       	ldi	r22, 0x02	; 2
    1244:	0e 94 ab 08 	call	0x1156	; 0x1156 <pcf8574_setoutputpinhigh>
    lcd_e_delay();
    1248:	00 c0       	rjmp	.+0      	; 0x124a <toggle_e+0x12>
    pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	62 e0       	ldi	r22, 0x02	; 2
    124e:	0e 94 bc 08 	call	0x1178	; 0x1178 <pcf8574_setoutputpinlow>
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <lcd_write>:
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs) 
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <lcd_write+0x6>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	6a 83       	std	Y+2, r22	; 0x02
	if (rs) /* write data        (RS=1, RW=0) */
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	88 23       	and	r24, r24
    126a:	31 f0       	breq	.+12     	; 0x1278 <lcd_write+0x20>
		dataport |= _BV(LCD_RS_PIN);
    126c:	80 91 6c 00 	lds	r24, 0x006C
    1270:	81 60       	ori	r24, 0x01	; 1
    1272:	80 93 6c 00 	sts	0x006C, r24
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <lcd_write+0x2a>
	else /* write instruction (RS=0, RW=0) */
		dataport &= ~_BV(LCD_RS_PIN);
    1278:	80 91 6c 00 	lds	r24, 0x006C
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	80 93 6c 00 	sts	0x006C, r24
	dataport &= ~_BV(LCD_RW_PIN);
    1282:	80 91 6c 00 	lds	r24, 0x006C
    1286:	8d 7f       	andi	r24, 0xFD	; 253
    1288:	80 93 6c 00 	sts	0x006C, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    128c:	90 91 6c 00 	lds	r25, 0x006C
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	69 2f       	mov	r22, r25
    1294:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>

	/* output high nibble first */
    dataport &= ~_BV(LCD_DATA3_PIN);
    1298:	80 91 6c 00 	lds	r24, 0x006C
    129c:	8f 77       	andi	r24, 0x7F	; 127
    129e:	80 93 6c 00 	sts	0x006C, r24
    dataport &= ~_BV(LCD_DATA2_PIN);
    12a2:	80 91 6c 00 	lds	r24, 0x006C
    12a6:	8f 7b       	andi	r24, 0xBF	; 191
    12a8:	80 93 6c 00 	sts	0x006C, r24
    dataport &= ~_BV(LCD_DATA1_PIN);
    12ac:	80 91 6c 00 	lds	r24, 0x006C
    12b0:	8f 7d       	andi	r24, 0xDF	; 223
    12b2:	80 93 6c 00 	sts	0x006C, r24
    dataport &= ~_BV(LCD_DATA0_PIN);
    12b6:	80 91 6c 00 	lds	r24, 0x006C
    12ba:	8f 7e       	andi	r24, 0xEF	; 239
    12bc:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x80) dataport |= _BV(LCD_DATA3_PIN);
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	88 23       	and	r24, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <lcd_write+0x78>
    12c6:	80 91 6c 00 	lds	r24, 0x006C
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x40) dataport |= _BV(LCD_DATA2_PIN);
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	80 74       	andi	r24, 0x40	; 64
    12d8:	90 70       	andi	r25, 0x00	; 0
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <lcd_write+0x90>
    12de:	80 91 6c 00 	lds	r24, 0x006C
    12e2:	80 64       	ori	r24, 0x40	; 64
    12e4:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x20) dataport |= _BV(LCD_DATA1_PIN);
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	80 72       	andi	r24, 0x20	; 32
    12f0:	90 70       	andi	r25, 0x00	; 0
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	29 f0       	breq	.+10     	; 0x1300 <lcd_write+0xa8>
    12f6:	80 91 6c 00 	lds	r24, 0x006C
    12fa:	80 62       	ori	r24, 0x20	; 32
    12fc:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x10) dataport |= _BV(LCD_DATA0_PIN);
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	80 71       	andi	r24, 0x10	; 16
    1308:	90 70       	andi	r25, 0x00	; 0
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	29 f0       	breq	.+10     	; 0x1318 <lcd_write+0xc0>
    130e:	80 91 6c 00 	lds	r24, 0x006C
    1312:	80 61       	ori	r24, 0x10	; 16
    1314:	80 93 6c 00 	sts	0x006C, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    1318:	90 91 6c 00 	lds	r25, 0x006C
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	69 2f       	mov	r22, r25
    1320:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>
	lcd_e_toggle();
    1324:	0e 94 1c 09 	call	0x1238	; 0x1238 <toggle_e>

	/* output low nibble */
	dataport &= ~_BV(LCD_DATA3_PIN);
    1328:	80 91 6c 00 	lds	r24, 0x006C
    132c:	8f 77       	andi	r24, 0x7F	; 127
    132e:	80 93 6c 00 	sts	0x006C, r24
	dataport &= ~_BV(LCD_DATA2_PIN);
    1332:	80 91 6c 00 	lds	r24, 0x006C
    1336:	8f 7b       	andi	r24, 0xBF	; 191
    1338:	80 93 6c 00 	sts	0x006C, r24
	dataport &= ~_BV(LCD_DATA1_PIN);
    133c:	80 91 6c 00 	lds	r24, 0x006C
    1340:	8f 7d       	andi	r24, 0xDF	; 223
    1342:	80 93 6c 00 	sts	0x006C, r24
	dataport &= ~_BV(LCD_DATA0_PIN);
    1346:	80 91 6c 00 	lds	r24, 0x006C
    134a:	8f 7e       	andi	r24, 0xEF	; 239
    134c:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x08) dataport |= _BV(LCD_DATA3_PIN);
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	88 70       	andi	r24, 0x08	; 8
    1358:	90 70       	andi	r25, 0x00	; 0
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	29 f0       	breq	.+10     	; 0x1368 <lcd_write+0x110>
    135e:	80 91 6c 00 	lds	r24, 0x006C
    1362:	80 68       	ori	r24, 0x80	; 128
    1364:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x04) dataport |= _BV(LCD_DATA2_PIN);
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	84 70       	andi	r24, 0x04	; 4
    1370:	90 70       	andi	r25, 0x00	; 0
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	29 f0       	breq	.+10     	; 0x1380 <lcd_write+0x128>
    1376:	80 91 6c 00 	lds	r24, 0x006C
    137a:	80 64       	ori	r24, 0x40	; 64
    137c:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x02) dataport |= _BV(LCD_DATA1_PIN);
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	82 70       	andi	r24, 0x02	; 2
    1388:	90 70       	andi	r25, 0x00	; 0
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	29 f0       	breq	.+10     	; 0x1398 <lcd_write+0x140>
    138e:	80 91 6c 00 	lds	r24, 0x006C
    1392:	80 62       	ori	r24, 0x20	; 32
    1394:	80 93 6c 00 	sts	0x006C, r24
	if(data & 0x01) dataport |= _BV(LCD_DATA0_PIN);
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	90 70       	andi	r25, 0x00	; 0
    13a2:	88 23       	and	r24, r24
    13a4:	29 f0       	breq	.+10     	; 0x13b0 <lcd_write+0x158>
    13a6:	80 91 6c 00 	lds	r24, 0x006C
    13aa:	80 61       	ori	r24, 0x10	; 16
    13ac:	80 93 6c 00 	sts	0x006C, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    13b0:	90 91 6c 00 	lds	r25, 0x006C
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	69 2f       	mov	r22, r25
    13b8:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>
	lcd_e_toggle();
    13bc:	0e 94 1c 09 	call	0x1238	; 0x1238 <toggle_e>

	/* all data pins high (inactive) */
	dataport |= _BV(LCD_DATA0_PIN);
    13c0:	80 91 6c 00 	lds	r24, 0x006C
    13c4:	80 61       	ori	r24, 0x10	; 16
    13c6:	80 93 6c 00 	sts	0x006C, r24
	dataport |= _BV(LCD_DATA1_PIN);
    13ca:	80 91 6c 00 	lds	r24, 0x006C
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	80 93 6c 00 	sts	0x006C, r24
	dataport |= _BV(LCD_DATA2_PIN);
    13d4:	80 91 6c 00 	lds	r24, 0x006C
    13d8:	80 64       	ori	r24, 0x40	; 64
    13da:	80 93 6c 00 	sts	0x006C, r24
	dataport |= _BV(LCD_DATA3_PIN);
    13de:	80 91 6c 00 	lds	r24, 0x006C
    13e2:	80 68       	ori	r24, 0x80	; 128
    13e4:	80 93 6c 00 	sts	0x006C, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    13e8:	90 91 6c 00 	lds	r25, 0x006C
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	69 2f       	mov	r22, r25
    13f0:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <lcd_read>:
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
static uint8_t lcd_read(uint8_t rs) 
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <lcd_read+0x6>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;

    if (rs) /* write data (RS=1, RW=0) */
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 23       	and	r24, r24
    140e:	31 f0       	breq	.+12     	; 0x141c <lcd_read+0x1e>
    	dataport |= _BV(LCD_RS_PIN);
    1410:	80 91 6c 00 	lds	r24, 0x006C
    1414:	81 60       	ori	r24, 0x01	; 1
    1416:	80 93 6c 00 	sts	0x006C, r24
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <lcd_read+0x28>
    else /* write instruction (RS=0, RW=0) */
    	dataport &= ~_BV(LCD_RS_PIN);
    141c:	80 91 6c 00 	lds	r24, 0x006C
    1420:	8e 7f       	andi	r24, 0xFE	; 254
    1422:	80 93 6c 00 	sts	0x006C, r24
    dataport |= _BV(LCD_RW_PIN);
    1426:	80 91 6c 00 	lds	r24, 0x006C
    142a:	82 60       	ori	r24, 0x02	; 2
    142c:	80 93 6c 00 	sts	0x006C, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    1430:	90 91 6c 00 	lds	r25, 0x006C
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	69 2f       	mov	r22, r25
    1438:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>

	/* read high nibble first */
    pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	0e 94 ab 08 	call	0x1156	; 0x1156 <pcf8574_setoutputpinhigh>
	lcd_e_delay();
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <lcd_read+0x48>
    data = 0;
    1446:	19 82       	std	Y+1, r1	; 0x01
    if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN)) data |= 0x10;
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	64 e0       	ldi	r22, 0x04	; 4
    144c:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    1450:	88 23       	and	r24, r24
    1452:	19 f4       	brne	.+6      	; 0x145a <lcd_read+0x5c>
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	80 61       	ori	r24, 0x10	; 16
    1458:	89 83       	std	Y+1, r24	; 0x01
    if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA1_PIN)) data |= 0x20;
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	65 e0       	ldi	r22, 0x05	; 5
    145e:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    1462:	88 23       	and	r24, r24
    1464:	19 f4       	brne	.+6      	; 0x146c <lcd_read+0x6e>
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	80 62       	ori	r24, 0x20	; 32
    146a:	89 83       	std	Y+1, r24	; 0x01
    if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA2_PIN)) data |= 0x40;
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	66 e0       	ldi	r22, 0x06	; 6
    1470:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    1474:	88 23       	and	r24, r24
    1476:	19 f4       	brne	.+6      	; 0x147e <lcd_read+0x80>
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	80 64       	ori	r24, 0x40	; 64
    147c:	89 83       	std	Y+1, r24	; 0x01
    if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA3_PIN)) data |= 0x80;
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	67 e0       	ldi	r22, 0x07	; 7
    1482:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    1486:	88 23       	and	r24, r24
    1488:	19 f4       	brne	.+6      	; 0x1490 <lcd_read+0x92>
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	80 68       	ori	r24, 0x80	; 128
    148e:	89 83       	std	Y+1, r24	; 0x01
	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	0e 94 bc 08 	call	0x1178	; 0x1178 <pcf8574_setoutputpinlow>

	/* Enable 500ns low */
	lcd_e_delay();
    1498:	00 c0       	rjmp	.+0      	; 0x149a <lcd_read+0x9c>

	/* read low nibble */
	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	62 e0       	ldi	r22, 0x02	; 2
    149e:	0e 94 ab 08 	call	0x1156	; 0x1156 <pcf8574_setoutputpinhigh>
	lcd_e_delay();
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <lcd_read+0xa6>
	if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN)) data |= 0x01;
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	64 e0       	ldi	r22, 0x04	; 4
    14a8:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    14ac:	88 23       	and	r24, r24
    14ae:	19 f4       	brne	.+6      	; 0x14b6 <lcd_read+0xb8>
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	81 60       	ori	r24, 0x01	; 1
    14b4:	89 83       	std	Y+1, r24	; 0x01
	if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA1_PIN)) data |= 0x02;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	65 e0       	ldi	r22, 0x05	; 5
    14ba:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    14be:	88 23       	and	r24, r24
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <lcd_read+0xca>
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	82 60       	ori	r24, 0x02	; 2
    14c6:	89 83       	std	Y+1, r24	; 0x01
	if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA2_PIN)) data |= 0x04;
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	66 e0       	ldi	r22, 0x06	; 6
    14cc:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    14d0:	88 23       	and	r24, r24
    14d2:	19 f4       	brne	.+6      	; 0x14da <lcd_read+0xdc>
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	84 60       	ori	r24, 0x04	; 4
    14d8:	89 83       	std	Y+1, r24	; 0x01
	if(!pcf8574_getinputpin(LCD_PCF8574_DEVICEID, LCD_DATA3_PIN)) data |= 0x08;
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	67 e0       	ldi	r22, 0x07	; 7
    14de:	0e 94 ed 08 	call	0x11da	; 0x11da <pcf8574_getinputpin>
    14e2:	88 23       	and	r24, r24
    14e4:	19 f4       	brne	.+6      	; 0x14ec <lcd_read+0xee>
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	88 60       	ori	r24, 0x08	; 8
    14ea:	89 83       	std	Y+1, r24	; 0x01
	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	0e 94 bc 08 	call	0x1178	; 0x1178 <pcf8574_setoutputpinlow>

    return data;
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <lcd_waitbusy>:

/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <lcd_read>
    150e:	88 23       	and	r24, r24
    1510:	dc f3       	brlt	.-10     	; 0x1508 <lcd_waitbusy+0x8>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
    1512:	84 e0       	ldi	r24, 0x04	; 4
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 93 0a 	call	0x1526	; 0x1526 <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <lcd_read>
    
}/* lcd_waitbusy */
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <_delayFourCycles+0x6>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	11 f4       	brne	.+4      	; 0x1540 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    153c:	00 c0       	rjmp	.+0      	; 0x153e <_delayFourCycles+0x18>
    153e:	06 c0       	rjmp	.+12     	; 0x154c <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <_delayFourCycles+0x1e>
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
    1562:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_waitbusy>
    lcd_write(cmd,0);
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	0e 94 2c 09 	call	0x1258	; 0x1258 <lcd_write>
}
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
    1582:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_waitbusy>
    lcd_write(data,1);
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	0e 94 2c 09 	call	0x1258	; 0x1258 <lcd_write>
}
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <lcd_clear_CGRAM>:


/*************************************************************************
Clear CGRAM
*************************************************************************/
void lcd_clear_CGRAM() {
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	register uint8_t addressCounter = 0;
    15a0:	19 82       	std	Y+1, r1	; 0x01
    15a2:	0a c0       	rjmp	.+20     	; 0x15b8 <lcd_clear_CGRAM+0x22>
	for (; addressCounter < 64; addressCounter++) {
		lcd_command((1 << LCD_CGRAM) + addressCounter);
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	80 5c       	subi	r24, 0xC0	; 192
    15a8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
		lcd_putc(0x00);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <lcd_putc>
/*************************************************************************
Clear CGRAM
*************************************************************************/
void lcd_clear_CGRAM() {
	register uint8_t addressCounter = 0;
	for (; addressCounter < 64; addressCounter++) {
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	80 34       	cpi	r24, 0x40	; 64
    15bc:	98 f3       	brcs	.-26     	; 0x15a4 <lcd_clear_CGRAM+0xe>
		lcd_command((1 << LCD_CGRAM) + addressCounter);
		lcd_putc(0x00);
	}
}
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <lcd_create_custom_char>:
Inputs: charnum: Character position in CGRAM. You can define maximum 8 chars.
values[]: Custom character descriptor pointer.
Returns: 0 - The custom character successfully created
1 - If the charnum greater than 7. You can define maximum 8 chars.
*************************************************************************/
uint8_t lcd_create_custom_char(uint8_t charnum, const uint8_t * values) {
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	27 97       	sbiw	r28, 0x07	; 7
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	8b 83       	std	Y+3, r24	; 0x03
    15dc:	7d 83       	std	Y+5, r23	; 0x05
    15de:	6c 83       	std	Y+4, r22	; 0x04
	register uint8_t j = 0;
    15e0:	1e 82       	std	Y+6, r1	; 0x06
	const uint8_t *p = values;
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01

	if (charnum > 7) {
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	18 f0       	brcs	.+6      	; 0x15f6 <lcd_create_custom_char+0x30>
		return 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	8f 83       	std	Y+7, r24	; 0x07
    15f4:	1f c0       	rjmp	.+62     	; 0x1634 <lcd_create_custom_char+0x6e>
	}
	lcd_command((1 << LCD_CGRAM) + charnum * 8); // set CGRAM address charnum * 8 byte
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	08 96       	adiw	r24, 0x08	; 8
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
    160e:	0e c0       	rjmp	.+28     	; 0x162c <lcd_create_custom_char+0x66>
	for (; j < 8; j++) {
		lcd_putc (*(p + j)); // write 8 byte data (one character) to CGRAM
    1610:	8e 81       	ldd	r24, Y+6	; 0x06
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	fc 01       	movw	r30, r24
    161c:	e2 0f       	add	r30, r18
    161e:	f3 1f       	adc	r31, r19
    1620:	80 81       	ld	r24, Z
    1622:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <lcd_putc>

	if (charnum > 7) {
		return 1;
	}
	lcd_command((1 << LCD_CGRAM) + charnum * 8); // set CGRAM address charnum * 8 byte
	for (; j < 8; j++) {
    1626:	8e 81       	ldd	r24, Y+6	; 0x06
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	8e 83       	std	Y+6, r24	; 0x06
    162c:	8e 81       	ldd	r24, Y+6	; 0x06
    162e:	88 30       	cpi	r24, 0x08	; 8
    1630:	78 f3       	brcs	.-34     	; 0x1610 <lcd_create_custom_char+0x4a>
		lcd_putc (*(p + j)); // write 8 byte data (one character) to CGRAM
	}
	return (0);
    1632:	1f 82       	std	Y+7, r1	; 0x07
    1634:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1636:	27 96       	adiw	r28, 0x07	; 7
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <lcd_gotoxy+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	88 23       	and	r24, r24
    165a:	29 f4       	brne	.+10     	; 0x1666 <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	80 58       	subi	r24, 0x80	; 128
    1660:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
    1664:	04 c0       	rjmp	.+8      	; 0x166e <lcd_gotoxy+0x26>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	80 54       	subi	r24, 0x40	; 64
    166a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
    1680:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_waitbusy>
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
}
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <lcd_led>:

/*************************************************************************
Set illumination pin
*************************************************************************/
void lcd_led(uint8_t onoff)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	89 83       	std	Y+1, r24	; 0x01
	if(onoff)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	88 23       	and	r24, r24
    16b2:	31 f0       	breq	.+12     	; 0x16c0 <lcd_led+0x1e>
		dataport &= ~_BV(LCD_LED_PIN);
    16b4:	80 91 6c 00 	lds	r24, 0x006C
    16b8:	87 7f       	andi	r24, 0xF7	; 247
    16ba:	80 93 6c 00 	sts	0x006C, r24
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <lcd_led+0x28>
	else
		dataport |= _BV(LCD_LED_PIN);
    16c0:	80 91 6c 00 	lds	r24, 0x006C
    16c4:	88 60       	ori	r24, 0x08	; 8
    16c6:	80 93 6c 00 	sts	0x006C, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    16ca:	90 91 6c 00 	lds	r25, 0x006C
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	69 2f       	mov	r22, r25
    16d2:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>
}
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <lcd_putc+0x6>
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;

    pos = lcd_waitbusy();   // read busy-flag and address counter
    16fe:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_waitbusy>
    1702:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	8a 30       	cpi	r24, 0x0A	; 10
    1708:	21 f4       	brne	.+8      	; 0x1712 <lcd_putc+0x20>
    {
        lcd_newline(pos);
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <lcd_newline>
    1710:	15 c0       	rjmp	.+42     	; 0x173c <lcd_putc+0x4a>
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	80 31       	cpi	r24, 0x10	; 16
    1716:	29 f4       	brne	.+10     	; 0x1722 <lcd_putc+0x30>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
    1718:	80 ec       	ldi	r24, 0xC0	; 192
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	0e 94 2c 09 	call	0x1258	; 0x1258 <lcd_write>
    1720:	07 c0       	rjmp	.+14     	; 0x1730 <lcd_putc+0x3e>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	80 35       	cpi	r24, 0x50	; 80
    1726:	21 f4       	brne	.+8      	; 0x1730 <lcd_putc+0x3e>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
    1728:	80 e8       	ldi	r24, 0x80	; 128
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	0e 94 2c 09 	call	0x1258	; 0x1258 <lcd_write>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
    1730:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_waitbusy>
#endif
        lcd_write(c, 1);
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	0e 94 2c 09 	call	0x1258	; 0x1258 <lcd_write>
    }

}/* lcd_putc */
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <lcd_newline+0x6>
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	80 34       	cpi	r24, 0x40	; 64
    1756:	18 f4       	brcc	.+6      	; 0x175e <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
    1758:	80 e4       	ldi	r24, 0x40	; 64
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
    175e:	1a 82       	std	Y+2, r1	; 0x02
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	80 58       	subi	r24, 0x80	; 128
    1764:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>

}/* lcd_newline */
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <lcd_puts+0x6>
    1778:	00 d0       	rcall	.+0      	; 0x177a <lcd_puts+0x8>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	03 c0       	rjmp	.+6      	; 0x178a <lcd_puts+0x18>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	80 81       	ld	r24, Z
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	8c 83       	std	Y+4, r24	; 0x04
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	88 23       	and	r24, r24
    179a:	11 f0       	breq	.+4      	; 0x17a0 <lcd_puts+0x2e>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	8c 83       	std	Y+4, r24	; 0x04
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	29 81       	ldd	r18, Y+1	; 0x01
    17a4:	3a 81       	ldd	r19, Y+2	; 0x02
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	3a 83       	std	Y+2, r19	; 0x02
    17ac:	29 83       	std	Y+1, r18	; 0x01
    17ae:	88 23       	and	r24, r24
    17b0:	49 f7       	brne	.-46     	; 0x1784 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <lcd_puts_p+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <lcd_puts_p+0x8>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <lcd_puts_p+0xa>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	9d 83       	std	Y+5, r25	; 0x05
    17d0:	8c 83       	std	Y+4, r24	; 0x04
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <lcd_puts_p+0x1a>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    17d4:	8e 81       	ldd	r24, Y+6	; 0x06
    17d6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	9b 83       	std	Y+3, r25	; 0x03
    17e0:	8a 83       	std	Y+2, r24	; 0x02
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	9d 81       	ldd	r25, Y+5	; 0x05
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	9d 83       	std	Y+5, r25	; 0x05
    17ea:	8c 83       	std	Y+4, r24	; 0x04
    17ec:	ea 81       	ldd	r30, Y+2	; 0x02
    17ee:	fb 81       	ldd	r31, Y+3	; 0x03
    17f0:	84 91       	lpm	r24, Z+
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	8e 83       	std	Y+6, r24	; 0x06
    17f8:	8e 81       	ldd	r24, Y+6	; 0x06
    17fa:	88 23       	and	r24, r24
    17fc:	59 f7       	brne	.-42     	; 0x17d4 <lcd_puts_p+0x14>
        lcd_putc(c);
    }

}/* lcd_puts_p */
    17fe:	26 96       	adiw	r28, 0x06	; 6
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
    181c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <pcf8574_init>
	#endif

	dataport = 0;
    1820:	10 92 6c 00 	sts	0x006C, r1
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    1824:	90 91 6c 00 	lds	r25, 0x006C
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	69 2f       	mov	r22, r25
    182c:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>

	delay(16000);        /* wait 16ms or more after power-on       */
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	9d e7       	ldi	r25, 0x7D	; 125
    1834:	0e 94 93 0a 	call	0x1526	; 0x1526 <_delayFourCycles>

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    1838:	80 91 6c 00 	lds	r24, 0x006C
    183c:	80 62       	ori	r24, 0x20	; 32
    183e:	80 93 6c 00 	sts	0x006C, r24
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    1842:	80 91 6c 00 	lds	r24, 0x006C
    1846:	80 61       	ori	r24, 0x10	; 16
    1848:	80 93 6c 00 	sts	0x006C, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    184c:	90 91 6c 00 	lds	r25, 0x006C
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	69 2f       	mov	r22, r25
    1854:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>

    lcd_e_toggle();
    1858:	0e 94 1c 09 	call	0x1238	; 0x1238 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	97 e2       	ldi	r25, 0x27	; 39
    1860:	0e 94 93 0a 	call	0x1526	; 0x1526 <_delayFourCycles>

    /* repeat last command */ 
    lcd_e_toggle();      
    1864:	0e 94 1c 09 	call	0x1238	; 0x1238 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
    1868:	80 e8       	ldi	r24, 0x80	; 128
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 93 0a 	call	0x1526	; 0x1526 <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    1870:	0e 94 1c 09 	call	0x1238	; 0x1238 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
    1874:	80 e8       	ldi	r24, 0x80	; 128
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 93 0a 	call	0x1526	; 0x1526 <_delayFourCycles>

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
    187c:	80 91 6c 00 	lds	r24, 0x006C
    1880:	8f 7e       	andi	r24, 0xEF	; 239
    1882:	80 93 6c 00 	sts	0x006C, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    1886:	90 91 6c 00 	lds	r25, 0x006C
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	69 2f       	mov	r22, r25
    188e:	0e 94 7b 07 	call	0xef6	; 0xef6 <pcf8574_setoutput>
    lcd_e_toggle();
    1892:	0e 94 1c 09 	call	0x1238	; 0x1238 <toggle_e>
    delay(64);           /* some displays need this additional delay */
    1896:	80 e8       	ldi	r24, 0x80	; 128
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 93 0a 	call	0x1526	; 0x1526 <_delayFourCycles>
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    189e:	88 e2       	ldi	r24, 0x28	; 40
    18a0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>

    lcd_command(LCD_DISP_OFF);              /* display off                  */
    18a4:	88 e0       	ldi	r24, 0x08	; 8
    18a6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
    lcd_clrscr();                           /* display clear                */
    18aa:	0e 94 47 0b 	call	0x168e	; 0x168e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    18ae:	86 e0       	ldi	r24, 0x06	; 6
    18b0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <lcd_command>

}/* lcd_init */
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <i2c_init>:

/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    18ca:	e1 e2       	ldi	r30, 0x21	; 33
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	10 82       	st	Z, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    18d0:	e0 e2       	ldi	r30, 0x20	; 32
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 e2       	ldi	r24, 0x20	; 32
    18d6:	80 83       	st	Z, r24
  //TWBR = (F_CPU / SCL_CLOCK / 8) -2;
}/* i2c_init */
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <i2c_start+0x6>
    18e4:	0f 92       	push	r0
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;

	// send START condition 發送start 訊號
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    18ec:	e6 e5       	ldi	r30, 0x56	; 86
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	84 ea       	ldi	r24, 0xA4	; 164
    18f2:	80 83       	st	Z, r24

	// wait until transmission completed 等待TWINT變成零(表示start信號已送出)
	while(!(TWCR & (1<<TWINT)));
    18f4:	e6 e5       	ldi	r30, 0x56	; 86
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	88 23       	and	r24, r24
    18fc:	dc f7       	brge	.-10     	; 0x18f4 <i2c_start+0x16>

	// check value of TWI Status Register. Mask prescaler bits.檢查發送後已經變化的
	//狀態寄存器 TWS7 TWS6 TWS5 TWS4 TWS3 – TWPS1 TWPS ..F8是只取狀態部分
	twst = TW_STATUS & 0xF8;
    18fe:	e1 e2       	ldi	r30, 0x21	; 33
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 7f       	andi	r24, 0xF8	; 248
    1906:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	88 30       	cpi	r24, 0x08	; 8
    190c:	31 f0       	breq	.+12     	; 0x191a <i2c_start+0x3c>
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	80 31       	cpi	r24, 0x10	; 16
    1912:	19 f0       	breq	.+6      	; 0x191a <i2c_start+0x3c>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	8b 83       	std	Y+3, r24	; 0x03
    1918:	1c c0       	rjmp	.+56     	; 0x1952 <i2c_start+0x74>
	// 	TW_START:start訊號傳輸 TW_REP_START:重複start訊號傳輸

	// send device address傳送地址
	TWDR = address;//設定傳送的地址(R/W include)
    191a:	e3 e2       	ldi	r30, 0x23	; 35
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);//發送地址
    1922:	e6 e5       	ldi	r30, 0x56	; 86
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	84 e8       	ldi	r24, 0x84	; 132
    1928:	80 83       	st	Z, r24

	// wail until transmission completed and ACK/NACK has been received(等待發送完成)
	while(!(TWCR & (1<<TWINT)));
    192a:	e6 e5       	ldi	r30, 0x56	; 86
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	dc f7       	brge	.-10     	; 0x192a <i2c_start+0x4c>

	// check value of TWI Status Register. Mask prescaler bits.檢查發送結果
	twst = TW_STATUS & 0xF8;
    1934:	e1 e2       	ldi	r30, 0x21	; 33
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 7f       	andi	r24, 0xF8	; 248
    193c:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	88 31       	cpi	r24, 0x18	; 24
    1942:	31 f0       	breq	.+12     	; 0x1950 <i2c_start+0x72>
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	80 34       	cpi	r24, 0x40	; 64
    1948:	19 f0       	breq	.+6      	; 0x1950 <i2c_start+0x72>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	8b 83       	std	Y+3, r24	; 0x03
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <i2c_start+0x74>
	//TW_MT_SLA_ACK:SLA+W transmitted, ACK received
	//TW_MR_SLA_ACK:SLA+R transmitted, ACK received
	return 0;
    1950:	1b 82       	std	Y+3, r1	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03

}/* i2c_start */
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <i2c_start_wait+0x6>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	8a 83       	std	Y+2, r24	; 0x02


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    196c:	e6 e5       	ldi	r30, 0x56	; 86
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	84 ea       	ldi	r24, 0xA4	; 164
    1972:	80 83       	st	Z, r24
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1974:	e6 e5       	ldi	r30, 0x56	; 86
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	88 23       	and	r24, r24
    197c:	dc f7       	brge	.-10     	; 0x1974 <i2c_start_wait+0x14>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    197e:	e1 e2       	ldi	r30, 0x21	; 33
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	88 7f       	andi	r24, 0xF8	; 248
    1986:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	88 30       	cpi	r24, 0x08	; 8
    198c:	19 f0       	breq	.+6      	; 0x1994 <i2c_start_wait+0x34>
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	80 31       	cpi	r24, 0x10	; 16
    1992:	61 f7       	brne	.-40     	; 0x196c <i2c_start_wait+0xc>
    ////////////失敗就一直重送開始信號
    	// send device address
    	TWDR = address;
    1994:	e3 e2       	ldi	r30, 0x23	; 35
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    199c:	e6 e5       	ldi	r30, 0x56	; 86
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	84 e8       	ldi	r24, 0x84	; 132
    19a2:	80 83       	st	Z, r24
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    19a4:	e6 e5       	ldi	r30, 0x56	; 86
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	88 23       	and	r24, r24
    19ac:	dc f7       	brge	.-10     	; 0x19a4 <i2c_start_wait+0x44>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    19ae:	e1 e2       	ldi	r30, 0x21	; 33
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 7f       	andi	r24, 0xF8	; 248
    19b6:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst == TW_MT_SLA_NACK )||(twst == TW_MR_DATA_NACK) )
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	80 32       	cpi	r24, 0x20	; 32
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <i2c_start_wait+0x64>
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	88 35       	cpi	r24, 0x58	; 88
    19c2:	71 f4       	brne	.+28     	; 0x19e0 <i2c_start_wait+0x80>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    19c4:	e6 e5       	ldi	r30, 0x56	; 86
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	84 e9       	ldi	r24, 0x94	; 148
    19ca:	80 83       	st	Z, r24
	        //沒收到回應Ack 發送停止信號
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    19cc:	e6 e5       	ldi	r30, 0x56	; 86
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	80 71       	andi	r24, 0x10	; 16
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	b9 f7       	brne	.-18     	; 0x19cc <i2c_start_wait+0x6c>
    19de:	c6 cf       	rjmp	.-116    	; 0x196c <i2c_start_wait+0xc>
	        
    	    continue;
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	0e 94 6f 0c 	call	0x18de	; 0x18de <i2c_start>

}/* i2c_rep_start */
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1a0c:	e6 e5       	ldi	r30, 0x56	; 86
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	84 e9       	ldi	r24, 0x94	; 148
    1a12:	80 83       	st	Z, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1a14:	e6 e5       	ldi	r30, 0x56	; 86
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	80 71       	andi	r24, 0x10	; 16
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	b9 f7       	brne	.-18     	; 0x1a14 <i2c_stop+0x10>

}/* i2c_stop */
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <i2c_write+0x6>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1a3a:	e3 e2       	ldi	r30, 0x23	; 35
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a42:	e6 e5       	ldi	r30, 0x56	; 86
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	84 e8       	ldi	r24, 0x84	; 132
    1a48:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1a4a:	e6 e5       	ldi	r30, 0x56	; 86
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 23       	and	r24, r24
    1a52:	dc f7       	brge	.-10     	; 0x1a4a <i2c_write+0x1e>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1a54:	e1 e2       	ldi	r30, 0x21	; 33
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	88 7f       	andi	r24, 0xF8	; 248
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 32       	cpi	r24, 0x28	; 40
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <i2c_write+0x3e>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	8b 83       	std	Y+3, r24	; 0x03
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <i2c_write+0x40>
	return 0;
    1a6a:	1b 82       	std	Y+3, r1	; 0x03
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03

}/* i2c_write */
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1a82:	e6 e5       	ldi	r30, 0x56	; 86
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	84 ec       	ldi	r24, 0xC4	; 196
    1a88:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));    
    1a8a:	e6 e5       	ldi	r30, 0x56	; 86
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 23       	and	r24, r24
    1a92:	dc f7       	brge	.-10     	; 0x1a8a <i2c_readAck+0x10>

    return TWDR;
    1a94:	e3 e2       	ldi	r30, 0x23	; 35
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z

}/* i2c_readAck */
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
    1aa8:	e6 e5       	ldi	r30, 0x56	; 86
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	84 e8       	ldi	r24, 0x84	; 132
    1aae:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    1ab0:	e6 e5       	ldi	r30, 0x56	; 86
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 23       	and	r24, r24
    1ab8:	dc f7       	brge	.-10     	; 0x1ab0 <i2c_readNak+0x10>
	
    return TWDR;
    1aba:	e3 e2       	ldi	r30, 0x23	; 35
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z

}/* i2c_readNak */
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <main>:
//#define PIN(x) (*(&x - 2))    /* address of input register of port x */



int main(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	6e 97       	sbiw	r28, 0x1e	; 30
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61

    sei();
    1ada:	78 94       	sei


    //init lcd
    lcd_init(LCD_DISP_ON_BLINK);
    1adc:	8d e0       	ldi	r24, 0x0D	; 13
    1ade:	0e 94 08 0c 	call	0x1810	; 0x1810 <lcd_init>

    //lcd go home
    lcd_home();
    1ae2:	0e 94 6f 0b 	call	0x16de	; 0x16de <lcd_home>

    uint8_t led = 0;
    1ae6:	1b 8a       	std	Y+19, r1	; 0x13
    lcd_led(led); //set led
    1ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aea:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <lcd_led>

    while(1) {
    	lcd_led(led); //set led
    1aee:	8b 89       	ldd	r24, Y+19	; 0x13
    1af0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <lcd_led>
    	led = !led; //invert led for next loop
    1af4:	1e 8e       	std	Y+30, r1	; 0x1e
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	88 23       	and	r24, r24
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <main+0x3a>
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	8e 8f       	std	Y+30, r24	; 0x1e
    1b00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b02:	8b 8b       	std	Y+19, r24	; 0x13

    	//test loop
    	int i = 0;
    1b04:	1a 8a       	std	Y+18, r1	; 0x12
    1b06:	19 8a       	std	Y+17, r1	; 0x11
    	int line = 0;
    1b08:	18 8a       	std	Y+16, r1	; 0x10
    1b0a:	1f 86       	std	Y+15, r1	; 0x0f
    	for(i=0; i<10; i++) {
    1b0c:	1a 8a       	std	Y+18, r1	; 0x12
    1b0e:	19 8a       	std	Y+17, r1	; 0x11
    1b10:	ab c0       	rjmp	.+342    	; 0x1c68 <main+0x1a2>
    		char buf[10];
    		itoa(i, buf, 10);
    1b12:	89 89       	ldd	r24, Y+17	; 0x11
    1b14:	9a 89       	ldd	r25, Y+18	; 0x12
    1b16:	9e 01       	movw	r18, r28
    1b18:	2c 5e       	subi	r18, 0xEC	; 236
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	4a e0       	ldi	r20, 0x0A	; 10
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	0e 94 ab 12 	call	0x2556	; 0x2556 <itoa>
    		lcd_gotoxy(1, line);
    1b26:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	69 2f       	mov	r22, r25
    1b2c:	0e 94 24 0b 	call	0x1648	; 0x1648 <lcd_gotoxy>
    		lcd_puts("i= ");
    1b30:	80 e6       	ldi	r24, 0x60	; 96
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 b9 0b 	call	0x1772	; 0x1772 <lcd_puts>
    		itoa(i, buf, 10);
    1b38:	89 89       	ldd	r24, Y+17	; 0x11
    1b3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b3c:	9e 01       	movw	r18, r28
    1b3e:	2c 5e       	subi	r18, 0xEC	; 236
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	b9 01       	movw	r22, r18
    1b44:	4a e0       	ldi	r20, 0x0A	; 10
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	0e 94 ab 12 	call	0x2556	; 0x2556 <itoa>
    		lcd_gotoxy(4, line);
    1b4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	69 2f       	mov	r22, r25
    1b52:	0e 94 24 0b 	call	0x1648	; 0x1648 <lcd_gotoxy>
    		lcd_puts(buf);
    1b56:	ce 01       	movw	r24, r28
    1b58:	44 96       	adiw	r24, 0x14	; 20
    1b5a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <lcd_puts>
    		line++;
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	98 8b       	std	Y+16, r25	; 0x10
    1b66:	8f 87       	std	Y+15, r24	; 0x0f
    		line %= 2;
    1b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6a:	98 89       	ldd	r25, Y+16	; 0x10
    1b6c:	22 e0       	ldi	r18, 0x02	; 2
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	b9 01       	movw	r22, r18
    1b72:	0e 94 4d 12 	call	0x249a	; 0x249a <__divmodhi4>
    1b76:	98 8b       	std	Y+16, r25	; 0x10
    1b78:	8f 87       	std	Y+15, r24	; 0x0f
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a8 ec       	ldi	r26, 0xC8	; 200
    1b80:	b2 e4       	ldi	r27, 0x42	; 66
    1b82:	8b 87       	std	Y+11, r24	; 0x0b
    1b84:	9c 87       	std	Y+12, r25	; 0x0c
    1b86:	ad 87       	std	Y+13, r26	; 0x0d
    1b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a ef       	ldi	r20, 0xFA	; 250
    1b98:	54 e4       	ldi	r21, 0x44	; 68
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	8f 83       	std	Y+7, r24	; 0x07
    1ba4:	98 87       	std	Y+8, r25	; 0x08
    1ba6:	a9 87       	std	Y+9, r26	; 0x09
    1ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbe:	88 23       	and	r24, r24
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <main+0x106>
		__ticks = 1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	3f c0       	rjmp	.+126    	; 0x1c4a <main+0x184>
	else if (__tmp > 65535)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	4c f5       	brge	.+82     	; 0x1c36 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	51 e4       	ldi	r21, 0x41	; 65
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <main+0x166>
    1c0e:	88 ec       	ldi	r24, 0xC8	; 200
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <main+0x154>
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	69 f7       	brne	.-38     	; 0x1c0e <main+0x148>
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c36:	6f 81       	ldd	r22, Y+7	; 0x07
    1c38:	78 85       	ldd	r23, Y+8	; 0x08
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <main+0x190>
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    	led = !led; //invert led for next loop

    	//test loop
    	int i = 0;
    	int line = 0;
    	for(i=0; i<10; i++) {
    1c5e:	89 89       	ldd	r24, Y+17	; 0x11
    1c60:	9a 89       	ldd	r25, Y+18	; 0x12
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	9a 8b       	std	Y+18, r25	; 0x12
    1c66:	89 8b       	std	Y+17, r24	; 0x11
    1c68:	89 89       	ldd	r24, Y+17	; 0x11
    1c6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c6c:	8a 30       	cpi	r24, 0x0A	; 10
    1c6e:	91 05       	cpc	r25, r1
    1c70:	0c f4       	brge	.+2      	; 0x1c74 <main+0x1ae>
    1c72:	4f cf       	rjmp	.-354    	; 0x1b12 <main+0x4c>
    1c74:	3c cf       	rjmp	.-392    	; 0x1aee <main+0x28>

00001c76 <tinudht_read>:

#define TINUDHT_RCV_TIMEOUT 255
#define TINUDHT_RCV_DELAY 10
#define TINUDHT_RCV_LENGTH 2

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin) {
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	c1 55       	subi	r28, 0x51	; 81
    1c80:	d0 40       	sbci	r29, 0x00	; 0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e6 5b       	subi	r30, 0xB6	; 182
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
    1c96:	fe 01       	movw	r30, r28
    1c98:	e4 5b       	subi	r30, 0xB4	; 180
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 83       	st	Z, r22

    // Buffer to received data
    uint8_t data[5];
    // Empty the buffer
    data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	eb 5b       	subi	r30, 0xBB	; 187
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	14 82       	std	Z+4, r1	; 0x04
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	eb 5b       	subi	r30, 0xBB	; 187
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	84 81       	ldd	r24, Z+4	; 0x04
    1cae:	fe 01       	movw	r30, r28
    1cb0:	eb 5b       	subi	r30, 0xBB	; 187
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	83 83       	std	Z+3, r24	; 0x03
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	eb 5b       	subi	r30, 0xBB	; 187
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	83 81       	ldd	r24, Z+3	; 0x03
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	eb 5b       	subi	r30, 0xBB	; 187
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	82 83       	std	Z+2, r24	; 0x02
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	eb 5b       	subi	r30, 0xBB	; 187
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	fe 01       	movw	r30, r28
    1cd0:	eb 5b       	subi	r30, 0xBB	; 187
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	81 83       	std	Z+1, r24	; 0x01
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	eb 5b       	subi	r30, 0xBB	; 187
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	81 81       	ldd	r24, Z+1	; 0x01
    1cde:	fe 01       	movw	r30, r28
    1ce0:	eb 5b       	subi	r30, 0xBB	; 187
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 83       	st	Z, r24

    // Send request
    DDRB |= (1 << dht_pin); // Set port as output
    1ce6:	a7 e3       	ldi	r26, 0x37	; 55
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e7 e3       	ldi	r30, 0x37	; 55
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e4 5b       	subi	r30, 0xB4	; 180
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <tinudht_read+0x92>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	2a 95       	dec	r18
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <tinudht_read+0x8e>
    1d0c:	84 2b       	or	r24, r20
    1d0e:	8c 93       	st	X, r24
    PORTB &= ~(1 << dht_pin);   // Set to 0
    1d10:	a8 e3       	ldi	r26, 0x38	; 56
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e8 e3       	ldi	r30, 0x38	; 56
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e4 5b       	subi	r30, 0xB4	; 180
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <tinudht_read+0xbc>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	2a 95       	dec	r18
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <tinudht_read+0xb8>
    1d36:	80 95       	com	r24
    1d38:	84 23       	and	r24, r20
    1d3a:	8c 93       	st	X, r24
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e9       	ldi	r26, 0x90	; 144
    1d42:	b1 e4       	ldi	r27, 0x41	; 65
    1d44:	8b af       	std	Y+59, r24	; 0x3b
    1d46:	9c af       	std	Y+60, r25	; 0x3c
    1d48:	ad af       	std	Y+61, r26	; 0x3d
    1d4a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d4e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d50:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d52:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a ef       	ldi	r20, 0xFA	; 250
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8f ab       	std	Y+55, r24	; 0x37
    1d66:	98 af       	std	Y+56, r25	; 0x38
    1d68:	a9 af       	std	Y+57, r26	; 0x39
    1d6a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d6c:	6f a9       	ldd	r22, Y+55	; 0x37
    1d6e:	78 ad       	ldd	r23, Y+56	; 0x38
    1d70:	89 ad       	ldd	r24, Y+57	; 0x39
    1d72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <tinudht_read+0x118>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9e ab       	std	Y+54, r25	; 0x36
    1d8a:	8d ab       	std	Y+53, r24	; 0x35
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <tinudht_read+0x196>
	else if (__tmp > 65535)
    1d8e:	6f a9       	ldd	r22, Y+55	; 0x37
    1d90:	78 ad       	ldd	r23, Y+56	; 0x38
    1d92:	89 ad       	ldd	r24, Y+57	; 0x39
    1d94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <tinudht_read+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1da8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1daa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e ab       	std	Y+54, r25	; 0x36
    1dcc:	8d ab       	std	Y+53, r24	; 0x35
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <tinudht_read+0x178>
    1dd0:	88 ec       	ldi	r24, 0xC8	; 200
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9c ab       	std	Y+52, r25	; 0x34
    1dd6:	8b ab       	std	Y+51, r24	; 0x33
    1dd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dda:	9c a9       	ldd	r25, Y+52	; 0x34
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <tinudht_read+0x166>
    1de0:	9c ab       	std	Y+52, r25	; 0x34
    1de2:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	8d a9       	ldd	r24, Y+53	; 0x35
    1de6:	9e a9       	ldd	r25, Y+54	; 0x36
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9e ab       	std	Y+54, r25	; 0x36
    1dec:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	8d a9       	ldd	r24, Y+53	; 0x35
    1df0:	9e a9       	ldd	r25, Y+54	; 0x36
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <tinudht_read+0x15a>
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <tinudht_read+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	6f a9       	ldd	r22, Y+55	; 0x37
    1dfa:	78 ad       	ldd	r23, Y+56	; 0x38
    1dfc:	89 ad       	ldd	r24, Y+57	; 0x39
    1dfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9e ab       	std	Y+54, r25	; 0x36
    1e0a:	8d ab       	std	Y+53, r24	; 0x35
    1e0c:	8d a9       	ldd	r24, Y+53	; 0x35
    1e0e:	9e a9       	ldd	r25, Y+54	; 0x36
    1e10:	9a ab       	std	Y+50, r25	; 0x32
    1e12:	89 ab       	std	Y+49, r24	; 0x31
    1e14:	89 a9       	ldd	r24, Y+49	; 0x31
    1e16:	9a a9       	ldd	r25, Y+50	; 0x32
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <tinudht_read+0x1a2>
    1e1c:	9a ab       	std	Y+50, r25	; 0x32
    1e1e:	89 ab       	std	Y+49, r24	; 0x31
    _delay_ms(18);  // Wait 18 ms
    PORTB |= (1 << dht_pin);    // Set to 1
    1e20:	a8 e3       	ldi	r26, 0x38	; 56
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 e3       	ldi	r30, 0x38	; 56
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	48 2f       	mov	r20, r24
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e4 5b       	subi	r30, 0xB4	; 180
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <tinudht_read+0x1cc>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	2a 95       	dec	r18
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <tinudht_read+0x1c8>
    1e46:	84 2b       	or	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e2       	ldi	r26, 0x20	; 32
    1e50:	b2 e4       	ldi	r27, 0x42	; 66
    1e52:	8d a7       	std	Y+45, r24	; 0x2d
    1e54:	9e a7       	std	Y+46, r25	; 0x2e
    1e56:	af a7       	std	Y+47, r26	; 0x2f
    1e58:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e5a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e5c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e60:	98 a9       	ldd	r25, Y+48	; 0x30
    1e62:	2b ea       	ldi	r18, 0xAB	; 171
    1e64:	3a ea       	ldi	r19, 0xAA	; 170
    1e66:	4a e2       	ldi	r20, 0x2A	; 42
    1e68:	50 e4       	ldi	r21, 0x40	; 64
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	89 a7       	std	Y+41, r24	; 0x29
    1e74:	9a a7       	std	Y+42, r25	; 0x2a
    1e76:	ab a7       	std	Y+43, r26	; 0x2b
    1e78:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e7a:	69 a5       	ldd	r22, Y+41	; 0x29
    1e7c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	1c f4       	brge	.+6      	; 0x1e98 <tinudht_read+0x222>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	88 a7       	std	Y+40, r24	; 0x28
    1e96:	91 c0       	rjmp	.+290    	; 0x1fba <tinudht_read+0x344>
	else if (__tmp > 255)
    1e98:	69 a5       	ldd	r22, Y+41	; 0x29
    1e9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	53 e4       	ldi	r21, 0x43	; 67
    1ea8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <tinudht_read+0x23c>
    1eb0:	7b c0       	rjmp	.+246    	; 0x1fa8 <tinudht_read+0x332>
	{
		_delay_ms(__us / 1000.0);
    1eb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a e7       	ldi	r20, 0x7A	; 122
    1ec0:	54 e4       	ldi	r21, 0x44	; 68
    1ec2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8c a3       	std	Y+36, r24	; 0x24
    1ecc:	9d a3       	std	Y+37, r25	; 0x25
    1ece:	ae a3       	std	Y+38, r26	; 0x26
    1ed0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	6c a1       	ldd	r22, Y+36	; 0x24
    1ed4:	7d a1       	ldd	r23, Y+37	; 0x25
    1ed6:	8e a1       	ldd	r24, Y+38	; 0x26
    1ed8:	9f a1       	ldd	r25, Y+39	; 0x27
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a ef       	ldi	r20, 0xFA	; 250
    1ee0:	54 e4       	ldi	r21, 0x44	; 68
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	88 a3       	std	Y+32, r24	; 0x20
    1eec:	99 a3       	std	Y+33, r25	; 0x21
    1eee:	aa a3       	std	Y+34, r26	; 0x22
    1ef0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ef2:	68 a1       	ldd	r22, Y+32	; 0x20
    1ef4:	79 a1       	ldd	r23, Y+33	; 0x21
    1ef6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ef8:	9b a1       	ldd	r25, Y+35	; 0x23
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <tinudht_read+0x29e>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f10:	8e 8f       	std	Y+30, r24	; 0x1e
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <tinudht_read+0x31c>
	else if (__tmp > 65535)
    1f14:	68 a1       	ldd	r22, Y+32	; 0x20
    1f16:	79 a1       	ldd	r23, Y+33	; 0x21
    1f18:	8a a1       	ldd	r24, Y+34	; 0x22
    1f1a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <tinudht_read+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	6c a1       	ldd	r22, Y+36	; 0x24
    1f2e:	7d a1       	ldd	r23, Y+37	; 0x25
    1f30:	8e a1       	ldd	r24, Y+38	; 0x26
    1f32:	9f a1       	ldd	r25, Y+39	; 0x27
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9f 8f       	std	Y+31, r25	; 0x1f
    1f52:	8e 8f       	std	Y+30, r24	; 0x1e
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <tinudht_read+0x2fe>
    1f56:	88 ec       	ldi	r24, 0xC8	; 200
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9d 8f       	std	Y+29, r25	; 0x1d
    1f5c:	8c 8f       	std	Y+28, r24	; 0x1c
    1f5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <tinudht_read+0x2ec>
    1f66:	9d 8f       	std	Y+29, r25	; 0x1d
    1f68:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f6c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9f 8f       	std	Y+31, r25	; 0x1f
    1f72:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <tinudht_read+0x2e0>
    1f7c:	24 c0       	rjmp	.+72     	; 0x1fc6 <tinudht_read+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	68 a1       	ldd	r22, Y+32	; 0x20
    1f80:	79 a1       	ldd	r23, Y+33	; 0x21
    1f82:	8a a1       	ldd	r24, Y+34	; 0x22
    1f84:	9b a1       	ldd	r25, Y+35	; 0x23
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f90:	8e 8f       	std	Y+30, r24	; 0x1e
    1f92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f94:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f96:	9b 8f       	std	Y+27, r25	; 0x1b
    1f98:	8a 8f       	std	Y+26, r24	; 0x1a
    1f9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f9c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <tinudht_read+0x328>
    1fa2:	9b 8f       	std	Y+27, r25	; 0x1b
    1fa4:	8a 8f       	std	Y+26, r24	; 0x1a
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <tinudht_read+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fa8:	69 a5       	ldd	r22, Y+41	; 0x29
    1faa:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	88 a7       	std	Y+40, r24	; 0x28
    1fba:	88 a5       	ldd	r24, Y+40	; 0x28
    1fbc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fbe:	89 8d       	ldd	r24, Y+25	; 0x19
    1fc0:	8a 95       	dec	r24
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <tinudht_read+0x34a>
    1fc4:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(40);  // Wait 40 us

    // Receive response
    DDRB &= ~(1 << dht_pin);    // Set port as input
    1fc6:	a7 e3       	ldi	r26, 0x37	; 55
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e7 e3       	ldi	r30, 0x37	; 55
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e4 5b       	subi	r30, 0xB4	; 180
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <tinudht_read+0x374>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <tinudht_read+0x370>
    1fee:	80 95       	com	r24
    1ff0:	84 23       	and	r24, r20
    1ff2:	8c 93       	st	X, r24

    uint8_t timeout;

    // Acknowledge
    timeout = TINUDHT_RCV_TIMEOUT;
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ec 5b       	subi	r30, 0xBC	; 188
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	80 83       	st	Z, r24
    1ffe:	20 c0       	rjmp	.+64     	; 0x2040 <tinudht_read+0x3ca>
    while(bit_is_clear(PINB, dht_pin))  // Wait for 1
        if (timeout-- == 0)
    2000:	62 96       	adiw	r28, 0x12	; 18
    2002:	1f ae       	std	Y+63, r1	; 0x3f
    2004:	62 97       	sbiw	r28, 0x12	; 18
    2006:	fe 01       	movw	r30, r28
    2008:	ec 5b       	subi	r30, 0xBC	; 188
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	21 f4       	brne	.+8      	; 0x201a <tinudht_read+0x3a4>
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	62 96       	adiw	r28, 0x12	; 18
    2016:	4f af       	std	Y+63, r20	; 0x3f
    2018:	62 97       	sbiw	r28, 0x12	; 18
    201a:	de 01       	movw	r26, r28
    201c:	ac 5b       	subi	r26, 0xBC	; 188
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	ec 5b       	subi	r30, 0xBC	; 188
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	81 50       	subi	r24, 0x01	; 1
    202a:	8c 93       	st	X, r24
    202c:	62 96       	adiw	r28, 0x12	; 18
    202e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2030:	62 97       	sbiw	r28, 0x12	; 18
    2032:	55 23       	and	r21, r21
    2034:	29 f0       	breq	.+10     	; 0x2040 <tinudht_read+0x3ca>
            return TINUDHT_ERROR_TIMEOUT;
    2036:	8e ef       	ldi	r24, 0xFE	; 254
    2038:	61 96       	adiw	r28, 0x11	; 17
    203a:	8f af       	std	Y+63, r24	; 0x3f
    203c:	61 97       	sbiw	r28, 0x11	; 17
    203e:	20 c2       	rjmp	.+1088   	; 0x2480 <tinudht_read+0x80a>

    uint8_t timeout;

    // Acknowledge
    timeout = TINUDHT_RCV_TIMEOUT;
    while(bit_is_clear(PINB, dht_pin))  // Wait for 1
    2040:	e6 e3       	ldi	r30, 0x36	; 54
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	fe 01       	movw	r30, r28
    204c:	e4 5b       	subi	r30, 0xB4	; 180
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 81       	ld	r24, Z
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a9 01       	movw	r20, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <tinudht_read+0x3e8>
    205a:	55 95       	asr	r21
    205c:	47 95       	ror	r20
    205e:	8a 95       	dec	r24
    2060:	e2 f7       	brpl	.-8      	; 0x205a <tinudht_read+0x3e4>
    2062:	ca 01       	movw	r24, r20
    2064:	81 70       	andi	r24, 0x01	; 1
    2066:	90 70       	andi	r25, 0x00	; 0
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	51 f2       	breq	.-108    	; 0x2000 <tinudht_read+0x38a>
        if (timeout-- == 0)
            return TINUDHT_ERROR_TIMEOUT;

    timeout = TINUDHT_RCV_TIMEOUT;
    206c:	fe 01       	movw	r30, r28
    206e:	ec 5b       	subi	r30, 0xBC	; 188
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	80 83       	st	Z, r24
    2076:	20 c0       	rjmp	.+64     	; 0x20b8 <tinudht_read+0x442>
    while(bit_is_set(PINB, dht_pin))    // Wait for 0
        if (timeout-- == 0)
    2078:	60 96       	adiw	r28, 0x10	; 16
    207a:	1f ae       	std	Y+63, r1	; 0x3f
    207c:	60 97       	sbiw	r28, 0x10	; 16
    207e:	fe 01       	movw	r30, r28
    2080:	ec 5b       	subi	r30, 0xBC	; 188
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	88 23       	and	r24, r24
    2088:	21 f4       	brne	.+8      	; 0x2092 <tinudht_read+0x41c>
    208a:	51 e0       	ldi	r21, 0x01	; 1
    208c:	60 96       	adiw	r28, 0x10	; 16
    208e:	5f af       	std	Y+63, r21	; 0x3f
    2090:	60 97       	sbiw	r28, 0x10	; 16
    2092:	de 01       	movw	r26, r28
    2094:	ac 5b       	subi	r26, 0xBC	; 188
    2096:	bf 4f       	sbci	r27, 0xFF	; 255
    2098:	fe 01       	movw	r30, r28
    209a:	ec 5b       	subi	r30, 0xBC	; 188
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	81 50       	subi	r24, 0x01	; 1
    20a2:	8c 93       	st	X, r24
    20a4:	60 96       	adiw	r28, 0x10	; 16
    20a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    20a8:	60 97       	sbiw	r28, 0x10	; 16
    20aa:	88 23       	and	r24, r24
    20ac:	29 f0       	breq	.+10     	; 0x20b8 <tinudht_read+0x442>
            return TINUDHT_ERROR_TIMEOUT;
    20ae:	4e ef       	ldi	r20, 0xFE	; 254
    20b0:	61 96       	adiw	r28, 0x11	; 17
    20b2:	4f af       	std	Y+63, r20	; 0x3f
    20b4:	61 97       	sbiw	r28, 0x11	; 17
    20b6:	e4 c1       	rjmp	.+968    	; 0x2480 <tinudht_read+0x80a>
    while(bit_is_clear(PINB, dht_pin))  // Wait for 1
        if (timeout-- == 0)
            return TINUDHT_ERROR_TIMEOUT;

    timeout = TINUDHT_RCV_TIMEOUT;
    while(bit_is_set(PINB, dht_pin))    // Wait for 0
    20b8:	e6 e3       	ldi	r30, 0x36	; 54
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	fe 01       	movw	r30, r28
    20c4:	e4 5b       	subi	r30, 0xB4	; 180
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	88 2f       	mov	r24, r24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a9 01       	movw	r20, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <tinudht_read+0x460>
    20d2:	55 95       	asr	r21
    20d4:	47 95       	ror	r20
    20d6:	8a 95       	dec	r24
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <tinudht_read+0x45c>
    20da:	ca 01       	movw	r24, r20
    20dc:	81 70       	andi	r24, 0x01	; 1
    20de:	90 70       	andi	r25, 0x00	; 0
    20e0:	88 23       	and	r24, r24
    20e2:	51 f6       	brne	.-108    	; 0x2078 <tinudht_read+0x402>
        if (timeout-- == 0)
            return TINUDHT_ERROR_TIMEOUT;

    uint8_t bit_index = 7;
    20e4:	fe 01       	movw	r30, r28
    20e6:	ed 5b       	subi	r30, 0xBD	; 189
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	87 e0       	ldi	r24, 0x07	; 7
    20ec:	80 83       	st	Z, r24
    uint8_t byte_index = 0;
    20ee:	fe 01       	movw	r30, r28
    20f0:	ee 5b       	subi	r30, 0xBE	; 190
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	10 82       	st	Z, r1
    // READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
    for (uint8_t i = 0; i < 40; i++)
    20f6:	fe 01       	movw	r30, r28
    20f8:	e0 5c       	subi	r30, 0xC0	; 192
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	10 82       	st	Z, r1
    20fe:	7e c1       	rjmp	.+764    	; 0x23fc <tinudht_read+0x786>
    {
        // Wait for start
        timeout = TINUDHT_RCV_TIMEOUT;
    2100:	fe 01       	movw	r30, r28
    2102:	ec 5b       	subi	r30, 0xBC	; 188
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	8f ef       	ldi	r24, 0xFF	; 255
    2108:	80 83       	st	Z, r24
    210a:	20 c0       	rjmp	.+64     	; 0x214c <tinudht_read+0x4d6>
        while(bit_is_clear(PINB, dht_pin))  // Wait for 1
            if (timeout-- == 0)
    210c:	2f 96       	adiw	r28, 0x0f	; 15
    210e:	1f ae       	std	Y+63, r1	; 0x3f
    2110:	2f 97       	sbiw	r28, 0x0f	; 15
    2112:	fe 01       	movw	r30, r28
    2114:	ec 5b       	subi	r30, 0xBC	; 188
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 81       	ld	r24, Z
    211a:	88 23       	and	r24, r24
    211c:	21 f4       	brne	.+8      	; 0x2126 <tinudht_read+0x4b0>
    211e:	51 e0       	ldi	r21, 0x01	; 1
    2120:	2f 96       	adiw	r28, 0x0f	; 15
    2122:	5f af       	std	Y+63, r21	; 0x3f
    2124:	2f 97       	sbiw	r28, 0x0f	; 15
    2126:	de 01       	movw	r26, r28
    2128:	ac 5b       	subi	r26, 0xBC	; 188
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	fe 01       	movw	r30, r28
    212e:	ec 5b       	subi	r30, 0xBC	; 188
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	81 50       	subi	r24, 0x01	; 1
    2136:	8c 93       	st	X, r24
    2138:	2f 96       	adiw	r28, 0x0f	; 15
    213a:	8f ad       	ldd	r24, Y+63	; 0x3f
    213c:	2f 97       	sbiw	r28, 0x0f	; 15
    213e:	88 23       	and	r24, r24
    2140:	29 f0       	breq	.+10     	; 0x214c <tinudht_read+0x4d6>
                return TINUDHT_ERROR_TIMEOUT;
    2142:	4e ef       	ldi	r20, 0xFE	; 254
    2144:	61 96       	adiw	r28, 0x11	; 17
    2146:	4f af       	std	Y+63, r20	; 0x3f
    2148:	61 97       	sbiw	r28, 0x11	; 17
    214a:	9a c1       	rjmp	.+820    	; 0x2480 <tinudht_read+0x80a>
    // READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
    for (uint8_t i = 0; i < 40; i++)
    {
        // Wait for start
        timeout = TINUDHT_RCV_TIMEOUT;
        while(bit_is_clear(PINB, dht_pin))  // Wait for 1
    214c:	e6 e3       	ldi	r30, 0x36	; 54
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	fe 01       	movw	r30, r28
    2158:	e4 5b       	subi	r30, 0xB4	; 180
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <tinudht_read+0x4f4>
    2166:	55 95       	asr	r21
    2168:	47 95       	ror	r20
    216a:	8a 95       	dec	r24
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <tinudht_read+0x4f0>
    216e:	ca 01       	movw	r24, r20
    2170:	81 70       	andi	r24, 0x01	; 1
    2172:	90 70       	andi	r25, 0x00	; 0
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	51 f2       	breq	.-108    	; 0x210c <tinudht_read+0x496>
            if (timeout-- == 0)
                return TINUDHT_ERROR_TIMEOUT;

        // Determine the bit value
        uint8_t len = 0;
    2178:	1f ae       	std	Y+63, r1	; 0x3f
    217a:	d5 c0       	rjmp	.+426    	; 0x2326 <tinudht_read+0x6b0>
        while(bit_is_set(PINB, dht_pin)) {  // Wait for 0
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e2       	ldi	r26, 0x20	; 32
    2182:	b1 e4       	ldi	r27, 0x41	; 65
    2184:	8d 8b       	std	Y+21, r24	; 0x15
    2186:	9e 8b       	std	Y+22, r25	; 0x16
    2188:	af 8b       	std	Y+23, r26	; 0x17
    218a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    218c:	6d 89       	ldd	r22, Y+21	; 0x15
    218e:	7e 89       	ldd	r23, Y+22	; 0x16
    2190:	8f 89       	ldd	r24, Y+23	; 0x17
    2192:	98 8d       	ldd	r25, Y+24	; 0x18
    2194:	2b ea       	ldi	r18, 0xAB	; 171
    2196:	3a ea       	ldi	r19, 0xAA	; 170
    2198:	4a e2       	ldi	r20, 0x2A	; 42
    219a:	50 e4       	ldi	r21, 0x40	; 64
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	89 8b       	std	Y+17, r24	; 0x11
    21a6:	9a 8b       	std	Y+18, r25	; 0x12
    21a8:	ab 8b       	std	Y+19, r26	; 0x13
    21aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21ac:	69 89       	ldd	r22, Y+17	; 0x11
    21ae:	7a 89       	ldd	r23, Y+18	; 0x12
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	9c 89       	ldd	r25, Y+20	; 0x14
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	1c f4       	brge	.+6      	; 0x21ca <tinudht_read+0x554>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	88 8b       	std	Y+16, r24	; 0x10
    21c8:	91 c0       	rjmp	.+290    	; 0x22ec <tinudht_read+0x676>
	else if (__tmp > 255)
    21ca:	69 89       	ldd	r22, Y+17	; 0x11
    21cc:	7a 89       	ldd	r23, Y+18	; 0x12
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	53 e4       	ldi	r21, 0x43	; 67
    21da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <tinudht_read+0x56e>
    21e2:	7b c0       	rjmp	.+246    	; 0x22da <tinudht_read+0x664>
	{
		_delay_ms(__us / 1000.0);
    21e4:	6d 89       	ldd	r22, Y+21	; 0x15
    21e6:	7e 89       	ldd	r23, Y+22	; 0x16
    21e8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ea:	98 8d       	ldd	r25, Y+24	; 0x18
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a e7       	ldi	r20, 0x7A	; 122
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8c 87       	std	Y+12, r24	; 0x0c
    21fe:	9d 87       	std	Y+13, r25	; 0x0d
    2200:	ae 87       	std	Y+14, r26	; 0x0e
    2202:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6c 85       	ldd	r22, Y+12	; 0x0c
    2206:	7d 85       	ldd	r23, Y+13	; 0x0d
    2208:	8e 85       	ldd	r24, Y+14	; 0x0e
    220a:	9f 85       	ldd	r25, Y+15	; 0x0f
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	88 87       	std	Y+8, r24	; 0x08
    221e:	99 87       	std	Y+9, r25	; 0x09
    2220:	aa 87       	std	Y+10, r26	; 0x0a
    2222:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2224:	68 85       	ldd	r22, Y+8	; 0x08
    2226:	79 85       	ldd	r23, Y+9	; 0x09
    2228:	8a 85       	ldd	r24, Y+10	; 0x0a
    222a:	9b 85       	ldd	r25, Y+11	; 0x0b
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <tinudht_read+0x5d0>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <tinudht_read+0x64e>
	else if (__tmp > 65535)
    2246:	68 85       	ldd	r22, Y+8	; 0x08
    2248:	79 85       	ldd	r23, Y+9	; 0x09
    224a:	8a 85       	ldd	r24, Y+10	; 0x0a
    224c:	9b 85       	ldd	r25, Y+11	; 0x0b
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <tinudht_read+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2260:	7d 85       	ldd	r23, Y+13	; 0x0d
    2262:	8e 85       	ldd	r24, Y+14	; 0x0e
    2264:	9f 85       	ldd	r25, Y+15	; 0x0f
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9f 83       	std	Y+7, r25	; 0x07
    2284:	8e 83       	std	Y+6, r24	; 0x06
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <tinudht_read+0x630>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9d 83       	std	Y+5, r25	; 0x05
    228e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <tinudht_read+0x61e>
    2298:	9d 83       	std	Y+5, r25	; 0x05
    229a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9f 83       	std	Y+7, r25	; 0x07
    22a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <tinudht_read+0x612>
    22ae:	24 c0       	rjmp	.+72     	; 0x22f8 <tinudht_read+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	68 85       	ldd	r22, Y+8	; 0x08
    22b2:	79 85       	ldd	r23, Y+9	; 0x09
    22b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9f 83       	std	Y+7, r25	; 0x07
    22c2:	8e 83       	std	Y+6, r24	; 0x06
    22c4:	8e 81       	ldd	r24, Y+6	; 0x06
    22c6:	9f 81       	ldd	r25, Y+7	; 0x07
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <tinudht_read+0x65a>
    22d4:	9b 83       	std	Y+3, r25	; 0x03
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <tinudht_read+0x682>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22da:	69 89       	ldd	r22, Y+17	; 0x11
    22dc:	7a 89       	ldd	r23, Y+18	; 0x12
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	88 8b       	std	Y+16, r24	; 0x10
    22ec:	88 89       	ldd	r24, Y+16	; 0x10
    22ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	8a 95       	dec	r24
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <tinudht_read+0x67c>
    22f6:	89 83       	std	Y+1, r24	; 0x01
            _delay_us(TINUDHT_RCV_DELAY);
            if (len++ == TINUDHT_RCV_TIMEOUT)
    22f8:	2e 96       	adiw	r28, 0x0e	; 14
    22fa:	1f ae       	std	Y+63, r1	; 0x3f
    22fc:	2e 97       	sbiw	r28, 0x0e	; 14
    22fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    2300:	8f 3f       	cpi	r24, 0xFF	; 255
    2302:	21 f4       	brne	.+8      	; 0x230c <tinudht_read+0x696>
    2304:	51 e0       	ldi	r21, 0x01	; 1
    2306:	2e 96       	adiw	r28, 0x0e	; 14
    2308:	5f af       	std	Y+63, r21	; 0x3f
    230a:	2e 97       	sbiw	r28, 0x0e	; 14
    230c:	8f ad       	ldd	r24, Y+63	; 0x3f
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	8f af       	std	Y+63, r24	; 0x3f
    2312:	2e 96       	adiw	r28, 0x0e	; 14
    2314:	8f ad       	ldd	r24, Y+63	; 0x3f
    2316:	2e 97       	sbiw	r28, 0x0e	; 14
    2318:	88 23       	and	r24, r24
    231a:	29 f0       	breq	.+10     	; 0x2326 <tinudht_read+0x6b0>
                return TINUDHT_ERROR_TIMEOUT;
    231c:	4e ef       	ldi	r20, 0xFE	; 254
    231e:	61 96       	adiw	r28, 0x11	; 17
    2320:	4f af       	std	Y+63, r20	; 0x3f
    2322:	61 97       	sbiw	r28, 0x11	; 17
    2324:	ad c0       	rjmp	.+346    	; 0x2480 <tinudht_read+0x80a>
            if (timeout-- == 0)
                return TINUDHT_ERROR_TIMEOUT;

        // Determine the bit value
        uint8_t len = 0;
        while(bit_is_set(PINB, dht_pin)) {  // Wait for 0
    2326:	e6 e3       	ldi	r30, 0x36	; 54
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	fe 01       	movw	r30, r28
    2332:	e4 5b       	subi	r30, 0xB4	; 180
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 81       	ld	r24, Z
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <tinudht_read+0x6ce>
    2340:	55 95       	asr	r21
    2342:	47 95       	ror	r20
    2344:	8a 95       	dec	r24
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <tinudht_read+0x6ca>
    2348:	ca 01       	movw	r24, r20
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	88 23       	and	r24, r24
    2350:	09 f0       	breq	.+2      	; 0x2354 <tinudht_read+0x6de>
    2352:	14 cf       	rjmp	.-472    	; 0x217c <tinudht_read+0x506>
            _delay_us(TINUDHT_RCV_DELAY);
            if (len++ == TINUDHT_RCV_TIMEOUT)
                return TINUDHT_ERROR_TIMEOUT;
            }

        if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
    2354:	8f ad       	ldd	r24, Y+63	; 0x3f
    2356:	82 30       	cpi	r24, 0x02	; 2
    2358:	50 f1       	brcs	.+84     	; 0x23ae <tinudht_read+0x738>
    235a:	fe 01       	movw	r30, r28
    235c:	ee 5b       	subi	r30, 0xBE	; 190
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	fe 01       	movw	r30, r28
    2368:	ee 5b       	subi	r30, 0xBE	; 190
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	ce 01       	movw	r24, r28
    2374:	8b 5b       	subi	r24, 0xBB	; 187
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	fc 01       	movw	r30, r24
    237a:	e2 0f       	add	r30, r18
    237c:	f3 1f       	adc	r31, r19
    237e:	80 81       	ld	r24, Z
    2380:	68 2f       	mov	r22, r24
    2382:	fe 01       	movw	r30, r28
    2384:	ed 5b       	subi	r30, 0xBD	; 189
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <tinudht_read+0x722>
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	2a 95       	dec	r18
    239a:	e2 f7       	brpl	.-8      	; 0x2394 <tinudht_read+0x71e>
    239c:	86 2b       	or	r24, r22
    239e:	28 2f       	mov	r18, r24
    23a0:	ce 01       	movw	r24, r28
    23a2:	8b 5b       	subi	r24, 0xBB	; 187
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	fc 01       	movw	r30, r24
    23a8:	e4 0f       	add	r30, r20
    23aa:	f5 1f       	adc	r31, r21
    23ac:	20 83       	st	Z, r18

        if (bit_index == 0) // next byte?
    23ae:	fe 01       	movw	r30, r28
    23b0:	ed 5b       	subi	r30, 0xBD	; 189
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	88 23       	and	r24, r24
    23b8:	79 f4       	brne	.+30     	; 0x23d8 <tinudht_read+0x762>
        {
            bit_index = 7;  // restart at MSB
    23ba:	fe 01       	movw	r30, r28
    23bc:	ed 5b       	subi	r30, 0xBD	; 189
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	87 e0       	ldi	r24, 0x07	; 7
    23c2:	80 83       	st	Z, r24
            byte_index++;   // next byte!
    23c4:	de 01       	movw	r26, r28
    23c6:	ae 5b       	subi	r26, 0xBE	; 190
    23c8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ca:	fe 01       	movw	r30, r28
    23cc:	ee 5b       	subi	r30, 0xBE	; 190
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 5f       	subi	r24, 0xFF	; 255
    23d4:	8c 93       	st	X, r24
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <tinudht_read+0x774>
        }
        else bit_index--;
    23d8:	de 01       	movw	r26, r28
    23da:	ad 5b       	subi	r26, 0xBD	; 189
    23dc:	bf 4f       	sbci	r27, 0xFF	; 255
    23de:	fe 01       	movw	r30, r28
    23e0:	ed 5b       	subi	r30, 0xBD	; 189
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	81 50       	subi	r24, 0x01	; 1
    23e8:	8c 93       	st	X, r24
            return TINUDHT_ERROR_TIMEOUT;

    uint8_t bit_index = 7;
    uint8_t byte_index = 0;
    // READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
    for (uint8_t i = 0; i < 40; i++)
    23ea:	fe 01       	movw	r30, r28
    23ec:	e0 5c       	subi	r30, 0xC0	; 192
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	fe 01       	movw	r30, r28
    23f6:	e0 5c       	subi	r30, 0xC0	; 192
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 83       	st	Z, r24
    23fc:	fe 01       	movw	r30, r28
    23fe:	e0 5c       	subi	r30, 0xC0	; 192
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	88 32       	cpi	r24, 0x28	; 40
    2406:	08 f4       	brcc	.+2      	; 0x240a <tinudht_read+0x794>
    2408:	7b ce       	rjmp	.-778    	; 0x2100 <tinudht_read+0x48a>
            byte_index++;   // next byte!
        }
        else bit_index--;
    }

    uint8_t checksum = data[0] + data[2];
    240a:	fe 01       	movw	r30, r28
    240c:	eb 5b       	subi	r30, 0xBB	; 187
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	90 81       	ld	r25, Z
    2412:	fe 01       	movw	r30, r28
    2414:	eb 5b       	subi	r30, 0xBB	; 187
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	fe 01       	movw	r30, r28
    241c:	ef 5b       	subi	r30, 0xBF	; 191
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	89 0f       	add	r24, r25
    2422:	80 83       	st	Z, r24
    if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    2424:	fe 01       	movw	r30, r28
    2426:	eb 5b       	subi	r30, 0xBB	; 187
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	94 81       	ldd	r25, Z+4	; 0x04
    242c:	fe 01       	movw	r30, r28
    242e:	ef 5b       	subi	r30, 0xBF	; 191
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	98 17       	cp	r25, r24
    2436:	29 f0       	breq	.+10     	; 0x2442 <tinudht_read+0x7cc>
    2438:	5f ef       	ldi	r21, 0xFF	; 255
    243a:	61 96       	adiw	r28, 0x11	; 17
    243c:	5f af       	std	Y+63, r21	; 0x3f
    243e:	61 97       	sbiw	r28, 0x11	; 17
    2440:	1f c0       	rjmp	.+62     	; 0x2480 <tinudht_read+0x80a>

    // On DHT11 data[1],data[3] are always zero so not used.
    ptinudht->humidity = data[0];
    2442:	fe 01       	movw	r30, r28
    2444:	eb 5b       	subi	r30, 0xBB	; 187
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	fe 01       	movw	r30, r28
    2450:	e6 5b       	subi	r30, 0xB6	; 182
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	01 90       	ld	r0, Z+
    2456:	f0 81       	ld	r31, Z
    2458:	e0 2d       	mov	r30, r0
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    ptinudht->temperature = data[2];
    245e:	fe 01       	movw	r30, r28
    2460:	eb 5b       	subi	r30, 0xBB	; 187
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	fe 01       	movw	r30, r28
    246c:	e6 5b       	subi	r30, 0xB6	; 182
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	01 90       	ld	r0, Z+
    2472:	f0 81       	ld	r31, Z
    2474:	e0 2d       	mov	r30, r0
    2476:	93 83       	std	Z+3, r25	; 0x03
    2478:	82 83       	std	Z+2, r24	; 0x02

    return TINUDHT_OK;
    247a:	61 96       	adiw	r28, 0x11	; 17
    247c:	1f ae       	std	Y+63, r1	; 0x3f
    247e:	61 97       	sbiw	r28, 0x11	; 17
    2480:	61 96       	adiw	r28, 0x11	; 17
    2482:	8f ad       	ldd	r24, Y+63	; 0x3f
    2484:	61 97       	sbiw	r28, 0x11	; 17
}
    2486:	cf 5a       	subi	r28, 0xAF	; 175
    2488:	df 4f       	sbci	r29, 0xFF	; 255
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <__divmodhi4>:
    249a:	97 fb       	bst	r25, 7
    249c:	09 2e       	mov	r0, r25
    249e:	07 26       	eor	r0, r23
    24a0:	0a d0       	rcall	.+20     	; 0x24b6 <__divmodhi4_neg1>
    24a2:	77 fd       	sbrc	r23, 7
    24a4:	04 d0       	rcall	.+8      	; 0x24ae <__divmodhi4_neg2>
    24a6:	0c d0       	rcall	.+24     	; 0x24c0 <__udivmodhi4>
    24a8:	06 d0       	rcall	.+12     	; 0x24b6 <__divmodhi4_neg1>
    24aa:	00 20       	and	r0, r0
    24ac:	1a f4       	brpl	.+6      	; 0x24b4 <__divmodhi4_exit>

000024ae <__divmodhi4_neg2>:
    24ae:	70 95       	com	r23
    24b0:	61 95       	neg	r22
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255

000024b4 <__divmodhi4_exit>:
    24b4:	08 95       	ret

000024b6 <__divmodhi4_neg1>:
    24b6:	f6 f7       	brtc	.-4      	; 0x24b4 <__divmodhi4_exit>
    24b8:	90 95       	com	r25
    24ba:	81 95       	neg	r24
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	08 95       	ret

000024c0 <__udivmodhi4>:
    24c0:	aa 1b       	sub	r26, r26
    24c2:	bb 1b       	sub	r27, r27
    24c4:	51 e1       	ldi	r21, 0x11	; 17
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <__udivmodhi4_ep>

000024c8 <__udivmodhi4_loop>:
    24c8:	aa 1f       	adc	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	a6 17       	cp	r26, r22
    24ce:	b7 07       	cpc	r27, r23
    24d0:	10 f0       	brcs	.+4      	; 0x24d6 <__udivmodhi4_ep>
    24d2:	a6 1b       	sub	r26, r22
    24d4:	b7 0b       	sbc	r27, r23

000024d6 <__udivmodhi4_ep>:
    24d6:	88 1f       	adc	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	5a 95       	dec	r21
    24dc:	a9 f7       	brne	.-22     	; 0x24c8 <__udivmodhi4_loop>
    24de:	80 95       	com	r24
    24e0:	90 95       	com	r25
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	08 95       	ret

000024e8 <__prologue_saves__>:
    24e8:	2f 92       	push	r2
    24ea:	3f 92       	push	r3
    24ec:	4f 92       	push	r4
    24ee:	5f 92       	push	r5
    24f0:	6f 92       	push	r6
    24f2:	7f 92       	push	r7
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	ca 1b       	sub	r28, r26
    2512:	db 0b       	sbc	r29, r27
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	09 94       	ijmp

00002520 <__epilogue_restores__>:
    2520:	2a 88       	ldd	r2, Y+18	; 0x12
    2522:	39 88       	ldd	r3, Y+17	; 0x11
    2524:	48 88       	ldd	r4, Y+16	; 0x10
    2526:	5f 84       	ldd	r5, Y+15	; 0x0f
    2528:	6e 84       	ldd	r6, Y+14	; 0x0e
    252a:	7d 84       	ldd	r7, Y+13	; 0x0d
    252c:	8c 84       	ldd	r8, Y+12	; 0x0c
    252e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2530:	aa 84       	ldd	r10, Y+10	; 0x0a
    2532:	b9 84       	ldd	r11, Y+9	; 0x09
    2534:	c8 84       	ldd	r12, Y+8	; 0x08
    2536:	df 80       	ldd	r13, Y+7	; 0x07
    2538:	ee 80       	ldd	r14, Y+6	; 0x06
    253a:	fd 80       	ldd	r15, Y+5	; 0x05
    253c:	0c 81       	ldd	r16, Y+4	; 0x04
    253e:	1b 81       	ldd	r17, Y+3	; 0x03
    2540:	aa 81       	ldd	r26, Y+2	; 0x02
    2542:	b9 81       	ldd	r27, Y+1	; 0x01
    2544:	ce 0f       	add	r28, r30
    2546:	d1 1d       	adc	r29, r1
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	ed 01       	movw	r28, r26
    2554:	08 95       	ret

00002556 <itoa>:
    2556:	fb 01       	movw	r30, r22
    2558:	9f 01       	movw	r18, r30
    255a:	e8 94       	clt
    255c:	42 30       	cpi	r20, 0x02	; 2
    255e:	c4 f0       	brlt	.+48     	; 0x2590 <itoa+0x3a>
    2560:	45 32       	cpi	r20, 0x25	; 37
    2562:	b4 f4       	brge	.+44     	; 0x2590 <itoa+0x3a>
    2564:	4a 30       	cpi	r20, 0x0A	; 10
    2566:	29 f4       	brne	.+10     	; 0x2572 <itoa+0x1c>
    2568:	97 fb       	bst	r25, 7
    256a:	1e f4       	brtc	.+6      	; 0x2572 <itoa+0x1c>
    256c:	90 95       	com	r25
    256e:	81 95       	neg	r24
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	64 2f       	mov	r22, r20
    2574:	77 27       	eor	r23, r23
    2576:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__udivmodhi4>
    257a:	80 5d       	subi	r24, 0xD0	; 208
    257c:	8a 33       	cpi	r24, 0x3A	; 58
    257e:	0c f0       	brlt	.+2      	; 0x2582 <itoa+0x2c>
    2580:	89 5d       	subi	r24, 0xD9	; 217
    2582:	81 93       	st	Z+, r24
    2584:	cb 01       	movw	r24, r22
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	a1 f7       	brne	.-24     	; 0x2572 <itoa+0x1c>
    258a:	16 f4       	brtc	.+4      	; 0x2590 <itoa+0x3a>
    258c:	5d e2       	ldi	r21, 0x2D	; 45
    258e:	51 93       	st	Z+, r21
    2590:	10 82       	st	Z, r1
    2592:	c9 01       	movw	r24, r18
    2594:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <strrev>

00002598 <strrev>:
    2598:	dc 01       	movw	r26, r24
    259a:	fc 01       	movw	r30, r24
    259c:	67 2f       	mov	r22, r23
    259e:	71 91       	ld	r23, Z+
    25a0:	77 23       	and	r23, r23
    25a2:	e1 f7       	brne	.-8      	; 0x259c <strrev+0x4>
    25a4:	32 97       	sbiw	r30, 0x02	; 2
    25a6:	04 c0       	rjmp	.+8      	; 0x25b0 <strrev+0x18>
    25a8:	7c 91       	ld	r23, X
    25aa:	6d 93       	st	X+, r22
    25ac:	70 83       	st	Z, r23
    25ae:	62 91       	ld	r22, -Z
    25b0:	ae 17       	cp	r26, r30
    25b2:	bf 07       	cpc	r27, r31
    25b4:	c8 f3       	brcs	.-14     	; 0x25a8 <strrev+0x10>
    25b6:	08 95       	ret

000025b8 <_exit>:
    25b8:	f8 94       	cli

000025ba <__stop_program>:
    25ba:	ff cf       	rjmp	.-2      	; 0x25ba <__stop_program>
