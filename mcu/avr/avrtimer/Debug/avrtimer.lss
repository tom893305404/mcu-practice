
avrtimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000003b4  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006dc  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/interrupt.h>
#include "lib/gentimerCounterMarco.h"

int temp = 1;

int main(){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	/*
	 * make T=0.5ms 80% square wave
	 */
	DDRB = 0xFF;
  8a:	e7 e3       	ldi	r30, 0x37	; 55
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
	PORTB =	0xFF;//set port b as output
  92:	e8 e3       	ldi	r30, 0x38	; 56
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24
	TCCR0 |= NO_CLK_SOURCE; //stop the counter
  9a:	a3 e5       	ldi	r26, 0x53	; 83
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e3 e5       	ldi	r30, 0x53	; 83
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8c 93       	st	X, r24
	SFIOR |= 0x01;//reset prescaler
  a6:	a0 e5       	ldi	r26, 0x50	; 80
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e0 e5       	ldi	r30, 0x50	; 80
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	8c 93       	st	X, r24
	TCNT0 = 206;//80%
  b4:	e2 e5       	ldi	r30, 0x52	; 82
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	8e ec       	ldi	r24, 0xCE	; 206
  ba:	80 83       	st	Z, r24
	TIMSK |=0x01; //open the overflow interrupt
  bc:	a9 e5       	ldi	r26, 0x59	; 89
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e9 e5       	ldi	r30, 0x59	; 89
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8c 93       	st	X, r24
	TCCR0 |= CLK_SRC_64;//start conter
  ca:	a3 e5       	ldi	r26, 0x53	; 83
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e3 e5       	ldi	r30, 0x53	; 83
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	8c 93       	st	X, r24
	sei();
  d8:	78 94       	sei
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x58>

000000dc <__vector_9>:

	}
}


ISR(TIMER0_OVF_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	0f 92       	push	r0
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	if(temp == 1){//switch high to low
  fc:	80 91 60 00 	lds	r24, 0x0060
 100:	90 91 61 00 	lds	r25, 0x0061
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	59 f4       	brne	.+22     	; 0x120 <__vector_9+0x44>
		PORTB |= 0x00;
 10a:	a8 e3       	ldi	r26, 0x38	; 56
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e8 e3       	ldi	r30, 0x38	; 56
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8c 93       	st	X, r24
		TCNT0 = 244;//80%
 116:	e2 e5       	ldi	r30, 0x52	; 82
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	84 ef       	ldi	r24, 0xF4	; 244
 11c:	80 83       	st	Z, r24
 11e:	0b c0       	rjmp	.+22     	; 0x136 <__vector_9+0x5a>
	}else{//switch low to high
		PORTB |= 0xFF;
 120:	e8 e3       	ldi	r30, 0x38	; 56
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	e8 e3       	ldi	r30, 0x38	; 56
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	80 83       	st	Z, r24
		TCNT0 = 206;//20%
 12e:	e2 e5       	ldi	r30, 0x52	; 82
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	8e ec       	ldi	r24, 0xCE	; 206
 134:	80 83       	st	Z, r24
	}
}
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
